# Generated by Django 5.2.3 on 2025-08-01 09:07

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organization', '0001_initial'),
        ('shared', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default='NT-BBF0ABD4', max_length=20, unique=True, verbose_name='Code')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('notification_type', models.CharField(choices=[('welcome', 'Welcome'), ('password_reset', 'Password Reset'), ('security_alert', 'Security Alert'), ('inventory_low', 'Low Inventory'), ('inventory_expired', 'Expired Inventory'), ('transaction_approved', 'Transaction Approved'), ('transaction_rejected', 'Transaction Rejected'), ('payment_due', 'Payment Due'), ('payment_overdue', 'Payment Overdue'), ('system_maintenance', 'System Maintenance'), ('custom', 'Custom')], max_length=20, verbose_name='Type')),
                ('channel', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('whatsapp', 'WhatsApp'), ('in_app', 'In-App'), ('push', 'Push Notification')], max_length=10, verbose_name='Channel')),
                ('subject', models.CharField(blank=True, max_length=200, verbose_name='Subject')),
                ('content', models.TextField(verbose_name='Content')),
                ('html_content', models.TextField(blank=True, verbose_name='HTML Content')),
                ('variables', models.JSONField(blank=True, default=dict, verbose_name='Template Variables')),
                ('is_default', models.BooleanField(default=False, verbose_name='Default Template')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_templates', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification Template',
                'verbose_name_plural': 'Notification Templates',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('channel', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('whatsapp', 'WhatsApp'), ('in_app', 'In-App'), ('push', 'Push Notification')], max_length=10, verbose_name='Channel')),
                ('notification_type', models.CharField(choices=[('welcome', 'Welcome'), ('password_reset', 'Password Reset'), ('security_alert', 'Security Alert'), ('inventory_low', 'Low Inventory'), ('inventory_expired', 'Expired Inventory'), ('transaction_approved', 'Transaction Approved'), ('transaction_rejected', 'Transaction Rejected'), ('payment_due', 'Payment Due'), ('payment_overdue', 'Payment Overdue'), ('system_maintenance', 'System Maintenance'), ('custom', 'Custom')], max_length=20, verbose_name='Type')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10, verbose_name='Priority')),
                ('recurrence', models.CharField(choices=[('none', 'None'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='none', max_length=10, verbose_name='Recurrence')),
                ('subject', models.CharField(max_length=200, verbose_name='Subject')),
                ('content', models.TextField(verbose_name='Content')),
                ('html_content', models.TextField(blank=True, null=True, verbose_name='HTML Content')),
                ('context_data', models.JSONField(blank=True, default=dict, verbose_name='Context Data')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('read', 'Read'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=10, verbose_name='Status')),
                ('scheduled_at', models.DateTimeField(blank=True, null=True, verbose_name='Scheduled At')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Sent At')),
                ('delivered_at', models.DateTimeField(blank=True, null=True, verbose_name='Delivered At')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Read At')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='Error Message')),
                ('retry_count', models.PositiveIntegerField(default=0, verbose_name='Retry Count')),
                ('max_retries', models.PositiveIntegerField(default=3, verbose_name='Max Retries')),
                ('external_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='External ID')),
                ('attachments', models.ManyToManyField(blank=True, related_name='notifications', to='shared.media', verbose_name='Attachments')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Recipient')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications', to='notifications.notificationtemplate', verbose_name='Template')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='UserNote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default='NOTE-3E305EC4', max_length=20, unique=True, verbose_name='Code')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('content', models.TextField(verbose_name='Content')),
                ('reminder_date', models.DateTimeField(blank=True, null=True, verbose_name='Reminder Date')),
                ('is_reminder_sent', models.BooleanField(default=False, verbose_name='Reminder Sent')),
                ('tags', models.CharField(blank=True, max_length=200, verbose_name='Tags')),
                ('color', models.CharField(default='#FFFFFF', max_length=7, verbose_name='Color')),
                ('attachments', models.ManyToManyField(blank=True, related_name='notes', to='shared.media', verbose_name='Attachments')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Note',
                'verbose_name_plural': 'User Notes',
            },
        ),
        migrations.CreateModel(
            name='InternalMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default='MSG-5B5A2D84', max_length=20, unique=True, verbose_name='Code')),
                ('subject', models.CharField(max_length=200, verbose_name='Subject')),
                ('content', models.TextField(verbose_name='Content')),
                ('is_read', models.BooleanField(default=False, verbose_name='Is Read')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Read At')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10, verbose_name='Priority')),
                ('attachments', models.ManyToManyField(blank=True, related_name='messages', to='shared.media', verbose_name='Attachments')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL, verbose_name='Recipient')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL, verbose_name='Sender')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Internal Message',
                'verbose_name_plural': 'Internal Messages',
                'indexes': [models.Index(fields=['branch', 'sender', 'recipient'], name='notificatio_branch__ff5d08_idx'), models.Index(fields=['is_read', 'priority'], name='notificatio_is_read_cf0998_idx')],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('action', models.CharField(choices=[('created', 'Created'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('read', 'Read'), ('failed', 'Failed'), ('retried', 'Retried'), ('cancelled', 'Cancelled')], max_length=20, verbose_name='Action')),
                ('details', models.JSONField(blank=True, default=dict, verbose_name='Details')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='Error Message')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='notifications.notification', verbose_name='Notification')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification Log',
                'verbose_name_plural': 'Notification Logs',
                'indexes': [models.Index(fields=['notification', 'action'], name='notificatio_notific_d42cfb_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='notificationtemplate',
            index=models.Index(fields=['branch', 'notification_type', 'channel'], name='notificatio_branch__3a005c_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationtemplate',
            index=models.Index(fields=['code'], name='notificatio_code_ffac41_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='notificationtemplate',
            unique_together={('branch', 'notification_type', 'channel')},
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['branch', 'recipient', 'status'], name='notificatio_branch__290555_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['channel', 'notification_type', 'priority'], name='notificatio_channel_e1d624_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['scheduled_at', 'recurrence'], name='notificatio_schedul_d9009e_idx'),
        ),
        migrations.AddIndex(
            model_name='usernote',
            index=models.Index(fields=['user', 'branch'], name='notificatio_user_id_409acf_idx'),
        ),
        migrations.AddIndex(
            model_name='usernote',
            index=models.Index(fields=['reminder_date', 'is_reminder_sent'], name='notificatio_reminde_5516e9_idx'),
        ),
    ]
