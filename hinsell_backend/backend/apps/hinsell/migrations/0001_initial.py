# Generated by Django 5.2.3 on 2025-08-01 09:07

import apps.core_apps.utils
import apps.core_apps.validators
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory', '0001_initial'),
        ('organization', '0001_initial'),
        ('shared', '0001_initial'),
        ('transactions', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default=apps.core_apps.utils.get_default_coupon_code, max_length=20, unique=True, verbose_name='Code')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('coupon_type', models.CharField(choices=[('fixed', 'Fixed Amount'), ('percentage', 'Percentage')], default='percentage', max_length=20, verbose_name='Coupon Type')),
                ('value', models.DecimalField(decimal_places=4, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Value')),
                ('min_order_amount', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Minimum Order Amount')),
                ('max_uses', models.PositiveIntegerField(default=0, help_text='Maximum number of uses (0 for unlimited)', verbose_name='Max Uses')),
                ('current_uses', models.PositiveIntegerField(default=0, verbose_name='Current Uses')),
                ('start_date', models.DateTimeField(verbose_name='Start Date')),
                ('end_date', models.DateTimeField(verbose_name='End Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('terms_conditions', models.TextField(blank=True, verbose_name='Terms and Conditions')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coupons', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('media', models.ManyToManyField(blank=True, related_name='coupons', to='shared.media', verbose_name='Media')),
                ('target_items', models.ManyToManyField(blank=True, related_name='coupons', to='inventory.item', verbose_name='Target Items')),
                ('target_users', models.ManyToManyField(blank=True, related_name='coupons', to=settings.AUTH_USER_MODEL, verbose_name='Target Users')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Coupon',
                'verbose_name_plural': 'Coupons',
            },
        ),
        migrations.CreateModel(
            name='Offer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default=apps.core_apps.utils.get_default_offer_code, max_length=20, unique=True, verbose_name='Code')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('slug', models.SlugField(max_length=120, unique=True, verbose_name='Slug')),
                ('offer_type', models.CharField(choices=[('discount', 'Discount'), ('buy_x_get_y', 'Buy X Get Y'), ('bundle', 'Bundle'), ('loyalty_points', 'Loyalty Points'), ('free_shipping', 'Free Shipping')], default='discount', max_length=20, verbose_name='Offer Type')),
                ('target_type', models.CharField(choices=[('all', 'All'), ('user', 'Specific Users'), ('country', 'Specific Countries'), ('item', 'Specific Items'), ('item_group', 'Item Groups'), ('store_group', 'Store Groups')], default='all', max_length=20, verbose_name='Target Type')),
                ('target_countries', models.JSONField(blank=True, default=list, help_text='List of country codes (ISO 3166-1 alpha-2)', verbose_name='Target Countries')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[apps.core_apps.validators.validate_percentage], verbose_name='Discount Percentage')),
                ('discount_amount', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Discount Amount')),
                ('buy_quantity', models.PositiveIntegerField(default=1, help_text='Required quantity for Buy X Get Y offers', verbose_name='Buy Quantity')),
                ('get_quantity', models.PositiveIntegerField(default=0, help_text='Free quantity for Buy X Get Y offers', verbose_name='Get Quantity')),
                ('loyalty_points_earned', models.PositiveIntegerField(default=0, verbose_name='Loyalty Points Earned')),
                ('start_date', models.DateTimeField(verbose_name='Start Date')),
                ('end_date', models.DateTimeField(verbose_name='End Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('max_uses', models.PositiveIntegerField(default=0, help_text='Maximum number of uses (0 for unlimited)', verbose_name='Max Uses')),
                ('current_uses', models.PositiveIntegerField(default=0, verbose_name='Current Uses')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('terms_conditions', models.TextField(blank=True, verbose_name='Terms and Conditions')),
                ('meta_title', models.CharField(blank=True, max_length=60, verbose_name='Meta Title')),
                ('meta_description', models.CharField(blank=True, max_length=160, verbose_name='Meta Description')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offers', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('media', models.ManyToManyField(blank=True, related_name='offers', to='shared.media', verbose_name='Media')),
                ('target_item_groups', models.ManyToManyField(blank=True, related_name='offers', to='inventory.itemgroup', verbose_name='Target Item Groups')),
                ('target_items', models.ManyToManyField(blank=True, related_name='offers', to='inventory.item', verbose_name='Target Items')),
                ('target_store_groups', models.ManyToManyField(blank=True, related_name='offers', to='inventory.storegroup', verbose_name='Target Store Groups')),
                ('target_users', models.ManyToManyField(blank=True, related_name='offers', to=settings.AUTH_USER_MODEL, verbose_name='Target Users')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Offer',
                'verbose_name_plural': 'Offers',
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default=apps.core_apps.utils.get_default_campaign_code, max_length=20, unique=True, verbose_name='Code')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('slug', models.SlugField(max_length=120, unique=True, verbose_name='Slug')),
                ('campaign_type', models.CharField(choices=[('email', 'Email Campaign'), ('social_media', 'Social Media'), ('in_app', 'In-App Campaign'), ('push', 'Push Notification')], default='email', max_length=20, verbose_name='Campaign Type')),
                ('target_countries', models.JSONField(blank=True, default=list, help_text='List of country codes (ISO 3166-1 alpha-2)', verbose_name='Target Countries')),
                ('start_date', models.DateTimeField(verbose_name='Start Date')),
                ('end_date', models.DateTimeField(verbose_name='End Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('impressions', models.PositiveIntegerField(default=0, verbose_name='Impressions')),
                ('clicks', models.PositiveIntegerField(default=0, verbose_name='Clicks')),
                ('conversions', models.PositiveIntegerField(default=0, verbose_name='Conversions')),
                ('conversion_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Conversion Rate')),
                ('content', models.TextField(verbose_name='Content')),
                ('call_to_action', models.CharField(blank=True, max_length=100, verbose_name='Call to Action')),
                ('analytics_data', models.JSONField(blank=True, default=dict, verbose_name='Analytics Data')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaigns', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('media', models.ManyToManyField(blank=True, related_name='campaigns', to='shared.media', verbose_name='Media')),
                ('target_users', models.ManyToManyField(blank=True, related_name='campaigns', to=settings.AUTH_USER_MODEL, verbose_name='Target Users')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('coupon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='campaigns', to='hinsell.coupon', verbose_name='Coupon')),
                ('offer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='campaigns', to='hinsell.offer', verbose_name='Offer')),
            ],
            options={
                'verbose_name': 'Campaign',
                'verbose_name_plural': 'Campaigns',
            },
        ),
        migrations.CreateModel(
            name='UserCoupon',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('redemption_date', models.DateTimeField(auto_now_add=True, verbose_name='Redemption Date')),
                ('is_used', models.BooleanField(default=False, verbose_name='Used')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_coupons', to='organization.branch', verbose_name='Branch')),
                ('coupon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_coupons', to='hinsell.coupon', verbose_name='Coupon')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_coupons', to='transactions.transactionheader', verbose_name='Transaction')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_coupons', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Coupon',
                'verbose_name_plural': 'User Coupons',
            },
        ),
        migrations.AddIndex(
            model_name='coupon',
            index=models.Index(fields=['branch', 'code'], name='hinsell_cou_branch__620172_idx'),
        ),
        migrations.AddIndex(
            model_name='coupon',
            index=models.Index(fields=['is_active', 'start_date', 'end_date'], name='hinsell_cou_is_acti_046607_idx'),
        ),
        migrations.AddConstraint(
            model_name='coupon',
            constraint=models.CheckConstraint(condition=models.Q(('current_uses__lte', models.F('max_uses')), ('max_uses', 0), _connector='OR'), name='valid_coupon_uses'),
        ),
        migrations.AddIndex(
            model_name='offer',
            index=models.Index(fields=['branch', 'code'], name='hinsell_off_branch__38cf7a_idx'),
        ),
        migrations.AddIndex(
            model_name='offer',
            index=models.Index(fields=['slug', 'is_active', 'start_date', 'end_date'], name='hinsell_off_slug_2c41ed_idx'),
        ),
        migrations.AddIndex(
            model_name='offer',
            index=models.Index(fields=['offer_type', 'target_type'], name='hinsell_off_offer_t_8c3435_idx'),
        ),
        migrations.AddConstraint(
            model_name='offer',
            constraint=models.CheckConstraint(condition=models.Q(('discount_percentage__gte', 0), ('discount_percentage__lte', 100)), name='valid_offer_discount_percentage'),
        ),
        migrations.AddConstraint(
            model_name='offer',
            constraint=models.CheckConstraint(condition=models.Q(('current_uses__lte', models.F('max_uses')), ('max_uses', 0), _connector='OR'), name='valid_offer_uses'),
        ),
        migrations.AddIndex(
            model_name='campaign',
            index=models.Index(fields=['branch', 'code'], name='hinsell_cam_branch__f49494_idx'),
        ),
        migrations.AddIndex(
            model_name='campaign',
            index=models.Index(fields=['slug', 'is_active', 'start_date', 'end_date'], name='hinsell_cam_slug_ad7c52_idx'),
        ),
        migrations.AddIndex(
            model_name='campaign',
            index=models.Index(fields=['campaign_type'], name='hinsell_cam_campaig_71ce8c_idx'),
        ),
        migrations.AddConstraint(
            model_name='campaign',
            constraint=models.CheckConstraint(condition=models.Q(('conversion_rate__gte', 0), ('conversion_rate__lte', 100)), name='valid_conversion_rate'),
        ),
        migrations.AddIndex(
            model_name='usercoupon',
            index=models.Index(fields=['user', 'coupon'], name='hinsell_use_user_id_73fb84_idx'),
        ),
        migrations.AddIndex(
            model_name='usercoupon',
            index=models.Index(fields=['redemption_date', 'is_used'], name='hinsell_use_redempt_3a817f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usercoupon',
            unique_together={('user', 'coupon', 'order')},
        ),
    ]
