# Generated by Django 5.2.3 on 2025-07-01 07:22

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('organization', '0002_keyboardshortcuts'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LicenseType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('name', models.CharField(help_text='Name of the license type', max_length=100, unique=True, verbose_name='License Type Name')),
                ('category', models.CharField(choices=[('trial', 'Trial'), ('basic', 'Basic'), ('standard', 'Standard'), ('premium', 'Premium'), ('enterprise', 'Enterprise'), ('custom', 'Custom')], default='basic', help_text='License category', max_length=20, verbose_name='Category')),
                ('description', models.TextField(blank=True, help_text='Description of the license type', verbose_name='Description')),
                ('max_users', models.PositiveIntegerField(blank=True, help_text='Maximum number of users allowed (null = unlimited)', null=True, verbose_name='Maximum Users')),
                ('max_branches', models.PositiveIntegerField(blank=True, help_text='Maximum number of branches allowed (null = unlimited)', null=True, verbose_name='Maximum Branches')),
                ('max_transactions_per_month', models.PositiveIntegerField(blank=True, help_text='Maximum transactions per month (null = unlimited)', null=True, verbose_name='Max Transactions/Month')),
                ('max_storage_gb', models.PositiveIntegerField(blank=True, help_text='Maximum storage in GB (null = unlimited)', null=True, verbose_name='Max Storage (GB)')),
                ('allow_multi_currency', models.BooleanField(default=False, help_text='Allow multi-currency functionality', verbose_name='Allow Multi-Currency')),
                ('allow_advanced_reporting', models.BooleanField(default=False, help_text='Allow advanced reporting features', verbose_name='Allow Advanced Reporting')),
                ('allow_api_access', models.BooleanField(default=False, help_text='Allow API access', verbose_name='Allow API Access')),
                ('allow_integrations', models.BooleanField(default=False, help_text='Allow third-party integrations', verbose_name='Allow Integrations')),
                ('allow_custom_fields', models.BooleanField(default=False, help_text='Allow custom field creation', verbose_name='Allow Custom Fields')),
                ('allow_workflow_automation', models.BooleanField(default=False, help_text='Allow workflow automation features', verbose_name='Allow Workflow Automation')),
                ('support_level', models.CharField(choices=[('none', 'No Support'), ('email', 'Email Support'), ('priority', 'Priority Support'), ('dedicated', 'Dedicated Support')], default='email', help_text='Level of support provided', max_length=20, verbose_name='Support Level')),
                ('monthly_price', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly subscription price', max_digits=10, null=True, verbose_name='Monthly Price')),
                ('yearly_price', models.DecimalField(blank=True, decimal_places=2, help_text='Yearly subscription price', max_digits=10, null=True, verbose_name='Yearly Price')),
                ('is_available', models.BooleanField(default=True, help_text='Whether this license type is available for new subscriptions', verbose_name='Available')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'License Type',
                'verbose_name_plural': 'License Types',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('license_key', models.CharField(help_text='Unique license key', max_length=255, unique=True, verbose_name='License Key')),
                ('license_hash', models.CharField(help_text='SHA-256 hash of license key for validation', max_length=64, unique=True, verbose_name='License Hash')),
                ('status', models.CharField(choices=[('pending', 'Pending Activation'), ('active', 'Active'), ('expired', 'Expired'), ('suspended', 'Suspended'), ('revoked', 'Revoked'), ('trial', 'Trial')], default='pending', help_text='Current license status', max_length=20, verbose_name='Status')),
                ('issued_date', models.DateTimeField(auto_now_add=True, help_text='Date when license was issued', verbose_name='Issued Date')),
                ('activation_date', models.DateTimeField(blank=True, help_text='Date when license was activated', null=True, verbose_name='Activation Date')),
                ('expiry_date', models.DateTimeField(blank=True, help_text='Date when license expires (null = never expires)', null=True, verbose_name='Expiry Date')),
                ('last_validated', models.DateTimeField(blank=True, help_text='Last time license was validated', null=True, verbose_name='Last Validated')),
                ('current_users', models.PositiveIntegerField(default=0, help_text='Current number of active users', verbose_name='Current Users')),
                ('current_branches', models.PositiveIntegerField(default=0, help_text='Current number of branches', verbose_name='Current Branches')),
                ('monthly_transactions', models.PositiveIntegerField(default=0, help_text='Transactions this month', verbose_name='Monthly Transactions')),
                ('storage_used_gb', models.DecimalField(decimal_places=2, default=0, help_text='Storage currently used in GB', max_digits=10, verbose_name='Storage Used (GB)')),
                ('hardware_fingerprint', models.CharField(blank=True, help_text='Hardware fingerprint for license binding', max_length=255, null=True, verbose_name='Hardware Fingerprint')),
                ('license_data', models.JSONField(blank=True, default=dict, help_text='Additional license configuration data', verbose_name='License Data')),
                ('violation_count', models.PositiveIntegerField(default=0, help_text='Number of license violations', verbose_name='Violation Count')),
                ('last_violation_date', models.DateTimeField(blank=True, help_text='Date of last license violation', null=True, verbose_name='Last Violation Date')),
                ('licensee_name', models.CharField(help_text='Name of the license holder', max_length=200, verbose_name='Licensee Name')),
                ('licensee_email', models.EmailField(help_text='Email of the license holder', max_length=254, verbose_name='Licensee Email')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this license', verbose_name='Notes')),
                ('company', models.OneToOneField(help_text='Company this license belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='license', to='organization.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('license_type', models.ForeignKey(help_text='Type of license', on_delete=django.db.models.deletion.PROTECT, related_name='licenses', to='organization.licensetype', verbose_name='License Type')),
            ],
            options={
                'verbose_name': 'License',
                'verbose_name_plural': 'Licenses',
                'indexes': [models.Index(fields=['license_key'], name='organizatio_license_84fabd_idx'), models.Index(fields=['license_hash'], name='organizatio_license_e10358_idx'), models.Index(fields=['status'], name='organizatio_status_c255e2_idx'), models.Index(fields=['expiry_date'], name='organizatio_expiry__d5139e_idx'), models.Index(fields=['company'], name='organizatio_company_f0df20_idx')],
            },
        ),
    ]
