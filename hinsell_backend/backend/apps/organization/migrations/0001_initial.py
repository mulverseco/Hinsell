# Generated by Django 5.2.3 on 2025-06-25 08:42

import apps.core_apps.encryption
import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounting', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('company_name', models.CharField(help_text='Official company name', max_length=200, verbose_name='Company Name')),
                ('company_name_english', models.CharField(blank=True, help_text='Company name in English', max_length=200, null=True, verbose_name='Company Name (English)')),
                ('registration_number', models.CharField(blank=True, help_text='Official company registration number', max_length=50, null=True, unique=True, verbose_name='Registration Number')),
                ('tax_id', models.CharField(blank=True, help_text='Company tax identification number', max_length=50, null=True, unique=True, verbose_name='Tax ID')),
                ('email', models.EmailField(blank=True, help_text='Primary company email address', max_length=255, null=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email Address')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Primary company phone number', max_length=128, null=True, region=None, verbose_name='Phone Number')),
                ('address', models.TextField(blank=True, help_text='Company headquarters address', verbose_name='Address')),
                ('website', models.URLField(blank=True, help_text='Company website URL', null=True, verbose_name='Website')),
                ('industry', models.CharField(blank=True, help_text='Industry sector', max_length=100, null=True, verbose_name='Industry')),
                ('established_date', models.DateField(blank=True, help_text='Date when company was established', null=True, verbose_name='Established Date')),
                ('description', models.TextField(blank=True, help_text='Company description', verbose_name='Description')),
                ('logo', models.ImageField(blank=True, help_text='Company logo', null=True, upload_to='company_logos/', verbose_name='Logo')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('branch_code', models.CharField(help_text='Unique branch identifier code', max_length=20, verbose_name='Branch Code')),
                ('branch_name', models.CharField(help_text='Branch display name', max_length=200, verbose_name='Branch Name')),
                ('branch_name_english', models.CharField(blank=True, help_text='Branch name in English', max_length=200, null=True, verbose_name='Branch Name (English)')),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary/main branch', verbose_name='Primary Branch')),
                ('is_headquarters', models.BooleanField(default=False, help_text='Whether this branch is the company headquarters', verbose_name='Headquarters')),
                ('fiscal_year_start_month', models.IntegerField(default=1, help_text='Month when fiscal year begins (1-12)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='Fiscal Year Start Month')),
                ('fiscal_year_end_month', models.IntegerField(default=12, help_text='Month when fiscal year ends (1-12)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='Fiscal Year End Month')),
                ('current_fiscal_year', models.IntegerField(help_text='Current fiscal year', verbose_name='Current Fiscal Year')),
                ('use_cost_center', models.BooleanField(default=False, help_text='Enable cost center functionality', verbose_name='Use Cost Center')),
                ('use_sales_tax', models.BooleanField(default=False, help_text='Enable sales tax calculations', verbose_name='Use Sales Tax')),
                ('use_vat_tax', models.BooleanField(default=False, help_text='Enable VAT tax calculations', verbose_name='Use VAT Tax')),
                ('use_carry_fee', models.BooleanField(default=False, help_text='Enable carry fee calculations', verbose_name='Use Carry Fee')),
                ('use_expire_date', models.BooleanField(default=True, help_text='Track product expiration dates', verbose_name='Use Expire Date')),
                ('use_batch_no', models.BooleanField(default=True, help_text='Track product batch numbers', verbose_name='Use Batch Number')),
                ('use_barcode', models.BooleanField(default=True, help_text='Enable barcode functionality', verbose_name='Use Barcode')),
                ('use_multi_currency', models.BooleanField(default=False, help_text='Enable multiple currency support', verbose_name='Use Multi-Currency')),
                ('email', models.EmailField(blank=True, help_text='Branch email address', max_length=255, null=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email Address')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Branch phone number', max_length=128, null=True, region=None, verbose_name='Phone Number')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Branch fax number', max_length=128, null=True, region=None, verbose_name='Fax Number')),
                ('address', models.TextField(blank=True, help_text='Branch physical address', verbose_name='Address')),
                ('city', models.CharField(blank=True, help_text='City where branch is located', max_length=100, null=True, verbose_name='City')),
                ('state_province', models.CharField(blank=True, help_text='State or province where branch is located', max_length=100, null=True, verbose_name='State/Province')),
                ('country', models.CharField(blank=True, help_text='Country where branch is located', max_length=100, null=True, verbose_name='Country')),
                ('postal_code', models.CharField(blank=True, help_text='Postal/ZIP code', max_length=20, null=True, verbose_name='Postal Code')),
                ('timezone', models.CharField(default='UTC', help_text='Branch timezone', max_length=50, verbose_name='Timezone')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('default_currency', models.ForeignKey(blank=True, help_text='Default currency for this branch', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_branches', to='accounting.currency', verbose_name='Default Currency')),
                ('manager', models.ForeignKey(blank=True, help_text='User who manages this branch', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_branches', to=settings.AUTH_USER_MODEL, verbose_name='Branch Manager')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(help_text='Parent company', on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='organization.company', verbose_name='Company')),
            ],
            options={
                'verbose_name': 'Branch',
                'verbose_name_plural': 'Branches',
            },
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('config_key', models.CharField(max_length=100)),
                ('config_value', models.TextField()),
                ('config_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('decimal', 'Decimal'), ('boolean', 'Boolean'), ('json', 'JSON')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_system', models.BooleanField(default=False)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='organization.branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'System Configuration',
                'verbose_name_plural': 'System Configurations',
            },
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('database_server', apps.core_apps.encryption.EncryptedField(blank=True, help_text='Database server address', null=True, verbose_name='Database Server')),
                ('database_name', apps.core_apps.encryption.EncryptedField(blank=True, help_text='Database name', null=True, verbose_name='Database Name')),
                ('database_username', apps.core_apps.encryption.EncryptedField(blank=True, help_text='Database username', null=True, verbose_name='Database Username')),
                ('database_password', apps.core_apps.encryption.EncryptedField(blank=True, help_text='Database password', null=True, verbose_name='Database Password')),
                ('connection_timeout', models.PositiveIntegerField(default=30, help_text='Database connection timeout in seconds', verbose_name='Connection Timeout')),
                ('session_timeout', models.PositiveIntegerField(default=1800, help_text='User session timeout in seconds', verbose_name='Session Timeout')),
                ('max_login_attempts', models.PositiveIntegerField(default=5, help_text='Maximum failed login attempts before account lock', verbose_name='Max Login Attempts')),
                ('account_lockout_duration', models.PositiveIntegerField(default=30, help_text='Account lockout duration in minutes', verbose_name='Account Lockout Duration')),
                ('show_warnings', models.BooleanField(default=True, help_text='Display system warnings to users', verbose_name='Show Warnings')),
                ('check_sales_price', models.BooleanField(default=True, help_text='Validate sales prices during transactions', verbose_name='Check Sales Price')),
                ('enable_photo_storage', models.BooleanField(default=True, help_text='Allow photo uploads and storage', verbose_name='Enable Photo Storage')),
                ('reports_path', models.CharField(blank=True, help_text='Path where reports are stored', max_length=255, null=True, verbose_name='Reports Path')),
                ('backup_path', models.CharField(blank=True, help_text='Path where backups are stored', max_length=255, null=True, verbose_name='Backup Path')),
                ('enable_email_notifications', models.BooleanField(default=True, help_text='Enable system email notifications', verbose_name='Enable Email Notifications')),
                ('enable_sms_notifications', models.BooleanField(default=False, help_text='Enable system SMS notifications', verbose_name='Enable SMS Notifications')),
                ('enable_whatsapp_notifications', models.BooleanField(default=False, help_text='Enable system WhatsApp notifications', verbose_name='Enable WhatsApp Notifications')),
                ('enable_in_app_notifications', models.BooleanField(default=False, help_text='Enable system In-App notifications', verbose_name='Enable In-App Notifications')),
                ('enable_push_notifications', models.BooleanField(default=False, help_text='Enable system Push notifications', verbose_name='Enable Push Notifications')),
                ('require_two_factor_auth', models.BooleanField(default=False, help_text='Require 2FA for all users', verbose_name='Require Two-Factor Authentication')),
                ('password_expiry_days', models.PositiveIntegerField(default=90, help_text='Number of days before password expires', verbose_name='Password Expiry Days')),
                ('minimum_password_length', models.PositiveIntegerField(default=8, help_text='Minimum required password length', validators=[django.core.validators.MinValueValidator(6), django.core.validators.MaxValueValidator(50)], verbose_name='Minimum Password Length')),
                ('branch', models.OneToOneField(help_text='Branch these settings apply to', on_delete=django.db.models.deletion.CASCADE, related_name='system_settings', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'System Settings',
                'verbose_name_plural': 'System Settings',
            },
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['company_name'], name='organizatio_company_e02ff0_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['registration_number'], name='organizatio_registr_b1cfc7_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['tax_id'], name='organizatio_tax_id_377e69_idx'),
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['company'], name='organizatio_company_e8ab6a_idx'),
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['branch_code'], name='organizatio_branch__eca19b_idx'),
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['is_primary'], name='organizatio_is_prim_c4310c_idx'),
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['is_active'], name='organizatio_is_acti_1536ce_idx'),
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['city'], name='organizatio_city_f164a8_idx'),
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['country'], name='organizatio_country_2a8404_idx'),
        ),
        migrations.AddConstraint(
            model_name='branch',
            constraint=models.CheckConstraint(condition=models.Q(('fiscal_year_start_month__gte', 1), ('fiscal_year_start_month__lte', 12)), name='valid_fiscal_start_month'),
        ),
        migrations.AddConstraint(
            model_name='branch',
            constraint=models.CheckConstraint(condition=models.Q(('fiscal_year_end_month__gte', 1), ('fiscal_year_end_month__lte', 12)), name='valid_fiscal_end_month'),
        ),
        migrations.AlterUniqueTogether(
            name='branch',
            unique_together={('company', 'branch_code'), ('company', 'branch_name')},
        ),
        migrations.AlterUniqueTogether(
            name='systemconfiguration',
            unique_together={('branch', 'config_key')},
        ),
        migrations.AddConstraint(
            model_name='systemsettings',
            constraint=models.CheckConstraint(condition=models.Q(('connection_timeout__gt', 0)), name='positive_connection_timeout'),
        ),
        migrations.AddConstraint(
            model_name='systemsettings',
            constraint=models.CheckConstraint(condition=models.Q(('session_timeout__gt', 0)), name='positive_session_timeout'),
        ),
        migrations.AddConstraint(
            model_name='systemsettings',
            constraint=models.CheckConstraint(condition=models.Q(('max_login_attempts__gt', 0)), name='positive_max_login_attempts'),
        ),
    ]
