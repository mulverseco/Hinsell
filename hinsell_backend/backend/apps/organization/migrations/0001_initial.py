# Generated by Django 5.2.3 on 2025-08-01 09:07

import apps.core_apps.encryption
import apps.core_apps.utils
import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounting', '0001_initial'),
        ('shared', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default='CMP-B7B924E5', max_length=20, unique=True, verbose_name='Code')),
                ('company_name', models.CharField(max_length=200, verbose_name='Name')),
                ('company_name_english', models.CharField(blank=True, max_length=200, null=True, verbose_name='Name (English)')),
                ('registration_number', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Registration Number')),
                ('tax_id', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Tax ID')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email Address')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Phone Number')),
                ('address', models.TextField(blank=True, verbose_name='Address')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Website')),
                ('industry', models.CharField(blank=True, max_length=100, null=True, verbose_name='Industry')),
                ('established_date', models.DateField(blank=True, null=True, verbose_name='Established Date')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('logo', models.ForeignKey(blank=True, limit_choices_to={'media_type': 'image'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_logos', to='shared.media', verbose_name='Logo')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('branch_code', models.CharField(default='BR-4E4ECB56', max_length=20, verbose_name='Code')),
                ('branch_name', models.CharField(max_length=200, verbose_name='Name')),
                ('branch_name_english', models.CharField(blank=True, max_length=200, null=True, verbose_name='Name (English)')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Primary Branch')),
                ('is_headquarters', models.BooleanField(default=False, verbose_name='Headquarters')),
                ('fiscal_year_start_month', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='Fiscal Year Start Month')),
                ('fiscal_year_end_month', models.IntegerField(default=12, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='Fiscal Year End Month')),
                ('current_fiscal_year', models.IntegerField(verbose_name='Current Fiscal Year')),
                ('use_cost_center', models.BooleanField(default=False, verbose_name='Use Cost Center')),
                ('use_sales_tax', models.BooleanField(default=False, verbose_name='Use Sales Tax')),
                ('use_vat_tax', models.BooleanField(default=False, verbose_name='Use VAT Tax')),
                ('use_carry_fee', models.BooleanField(default=False, verbose_name='Use Carry Fee')),
                ('use_expire_date', models.BooleanField(default=True, verbose_name='Use Expire Date')),
                ('use_batch_no', models.BooleanField(default=True, verbose_name='Use Batch Number')),
                ('use_barcode', models.BooleanField(default=True, verbose_name='Use Barcode')),
                ('use_multi_currency', models.BooleanField(default=False, verbose_name='Use Multi-Currency')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email Address')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Phone Number')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Fax Number')),
                ('address', models.TextField(blank=True, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='City')),
                ('state_province', models.CharField(blank=True, max_length=100, null=True, verbose_name='State/Province')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country')),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Postal Code')),
                ('timezone', models.CharField(default='UTC', max_length=50, verbose_name='Timezone')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('default_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_branches', to='accounting.currency', verbose_name='Default Currency')),
                ('manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_branches', to=settings.AUTH_USER_MODEL, verbose_name='Branch Manager')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='branches', to='organization.company', verbose_name='Company')),
            ],
            options={
                'verbose_name': 'Branch',
                'verbose_name_plural': 'Branches',
            },
        ),
        migrations.CreateModel(
            name='KeyboardShortcuts',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default='KBD-5020B2B4', max_length=20, unique=True, verbose_name='Code')),
                ('action_name', models.CharField(max_length=100, verbose_name='Action Name')),
                ('display_name', models.CharField(max_length=150, verbose_name='Display Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('category', models.CharField(choices=[('general', 'General'), ('navigation', 'Navigation'), ('forms', 'Forms'), ('reports', 'Reports'), ('inventory', 'Inventory'), ('sales', 'Sales'), ('accounting', 'Accounting'), ('admin', 'Administration'), ('custom', 'Custom')], default='general', max_length=20, verbose_name='Category')),
                ('key_combination', models.CharField(max_length=50, verbose_name='Key Combination')),
                ('primary_key', models.CharField(max_length=20, verbose_name='Primary Key')),
                ('modifiers', models.CharField(blank=True, max_length=50, verbose_name='Modifiers')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='Enabled')),
                ('is_system_default', models.BooleanField(default=False, verbose_name='System Default')),
                ('is_customizable', models.BooleanField(default=True, verbose_name='Customizable')),
                ('is_global', models.BooleanField(default=False, verbose_name='Global Shortcut')),
                ('context', models.CharField(blank=True, max_length=100, null=True, verbose_name='Context')),
                ('page_url_pattern', models.CharField(blank=True, max_length=200, null=True, verbose_name='Page URL Pattern')),
                ('priority', models.PositiveIntegerField(default=100, verbose_name='Priority')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='Sort Order')),
                ('javascript_function', models.TextField(blank=True, null=True, verbose_name='JavaScript Function')),
                ('alternative_combination', models.CharField(blank=True, max_length=50, null=True, verbose_name='Alternative Combination')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='keyboard_shortcuts', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Keyboard Shortcut',
                'verbose_name_plural': 'Keyboard Shortcuts',
            },
        ),
        migrations.CreateModel(
            name='LicenseType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default='LT-0CC7D342', max_length=20, unique=True, verbose_name='Code')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('category', models.CharField(choices=[('trial', 'Trial'), ('basic', 'Basic'), ('standard', 'Standard'), ('premium', 'Premium'), ('enterprise', 'Enterprise'), ('custom', 'Custom')], default='basic', max_length=20, verbose_name='Category')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('max_users', models.PositiveIntegerField(blank=True, null=True, verbose_name='Maximum Users')),
                ('max_branches', models.PositiveIntegerField(blank=True, null=True, verbose_name='Maximum Branches')),
                ('max_transactions_per_month', models.PositiveIntegerField(blank=True, null=True, verbose_name='Max Transactions/Month')),
                ('max_storage_gb', models.PositiveIntegerField(blank=True, null=True, verbose_name='Max Storage (GB)')),
                ('allow_multi_currency', models.BooleanField(default=False, verbose_name='Allow Multi-Currency')),
                ('allow_advanced_reporting', models.BooleanField(default=False, verbose_name='Allow Advanced Reporting')),
                ('allow_api_access', models.BooleanField(default=False, verbose_name='Allow API Access')),
                ('allow_integrations', models.BooleanField(default=False, verbose_name='Allow Integrations')),
                ('allow_custom_fields', models.BooleanField(default=False, verbose_name='Allow Custom Fields')),
                ('allow_workflow_automation', models.BooleanField(default=False, verbose_name='Allow Workflow Automation')),
                ('support_level', models.CharField(choices=[('none', 'No Support'), ('email', 'Email Support'), ('priority', 'Priority Support'), ('dedicated', 'Dedicated Support')], default='email', max_length=20, verbose_name='Support Level')),
                ('monthly_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Monthly Price')),
                ('yearly_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Yearly Price')),
                ('is_available', models.BooleanField(default=True, verbose_name='Available')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'License Type',
                'verbose_name_plural': 'License Types',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('license_key', models.CharField(max_length=255, unique=True, verbose_name='License Key')),
                ('license_code', models.CharField(default='LIC-FC5248DA', max_length=20, unique=True, verbose_name='Code')),
                ('license_hash', models.CharField(max_length=64, unique=True, verbose_name='License Hash')),
                ('status', models.CharField(choices=[('pending', 'Pending Activation'), ('active', 'Active'), ('expired', 'Expired'), ('suspended', 'Suspended'), ('revoked', 'Revoked'), ('trial', 'Trial')], default='pending', max_length=20, verbose_name='Status')),
                ('issued_date', models.DateTimeField(auto_now_add=True, verbose_name='Issued Date')),
                ('activation_date', models.DateTimeField(blank=True, null=True, verbose_name='Activation Date')),
                ('expiry_date', models.DateTimeField(blank=True, null=True, verbose_name='Expiry Date')),
                ('last_validated', models.DateTimeField(blank=True, null=True, verbose_name='Last Validated')),
                ('current_users', models.PositiveIntegerField(default=0, verbose_name='Current Users')),
                ('current_branches', models.PositiveIntegerField(default=0, verbose_name='Current Branches')),
                ('monthly_transactions', models.PositiveIntegerField(default=0, verbose_name='Monthly Transactions')),
                ('storage_used_gb', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Storage Used (GB)')),
                ('hardware_fingerprint', models.CharField(blank=True, max_length=255, null=True, verbose_name='Hardware Fingerprint')),
                ('license_data', models.JSONField(blank=True, default=dict, verbose_name='License Data')),
                ('violation_count', models.PositiveIntegerField(default=0, verbose_name='Violation Count')),
                ('last_violation_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Violation Date')),
                ('licensee_name', models.CharField(max_length=200, verbose_name='Licensee Name')),
                ('licensee_email', models.EmailField(max_length=254, verbose_name='Licensee Email')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='license', to='organization.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('license_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='licenses', to='organization.licensetype', verbose_name='License Type')),
            ],
            options={
                'verbose_name': 'License',
                'verbose_name_plural': 'Licenses',
            },
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default='CFG-B64347C6', max_length=20, unique=True, verbose_name='Code')),
                ('config_key', models.CharField(max_length=100, verbose_name='Key')),
                ('config_value', models.TextField(verbose_name='Value')),
                ('config_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('decimal', 'Decimal'), ('boolean', 'Boolean'), ('json', 'JSON')], max_length=20, verbose_name='Type')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_system', models.BooleanField(default=False, verbose_name='System Configuration')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='configurations', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'System Configuration',
                'verbose_name_plural': 'System Configurations',
            },
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('database_server', apps.core_apps.encryption.EncryptedField(blank=True, null=True, verbose_name='Database Server')),
                ('database_name', apps.core_apps.encryption.EncryptedField(blank=True, null=True, verbose_name='Database Name')),
                ('database_username', apps.core_apps.encryption.EncryptedField(blank=True, null=True, verbose_name='Database Username')),
                ('database_password', apps.core_apps.encryption.EncryptedField(blank=True, null=True, verbose_name='Database Password')),
                ('connection_timeout', models.PositiveIntegerField(default=30, verbose_name='Connection Timeout')),
                ('session_timeout', models.PositiveIntegerField(default=1800, verbose_name='Session Timeout')),
                ('max_login_attempts', models.PositiveIntegerField(default=5, verbose_name='Max Login Attempts')),
                ('account_lockout_duration', models.PositiveIntegerField(default=30, verbose_name='Account Lockout Duration')),
                ('show_warnings', models.BooleanField(default=True, verbose_name='Show Warnings')),
                ('check_sales_price', models.BooleanField(default=True, verbose_name='Check Sales Price')),
                ('enable_photo_storage', models.BooleanField(default=True, verbose_name='Enable Photo Storage')),
                ('reports_path', models.CharField(blank=True, max_length=255, null=True, verbose_name='Reports Path')),
                ('backup_path', models.CharField(blank=True, max_length=255, null=True, verbose_name='Backup Path')),
                ('notifications', models.JSONField(default=apps.core_apps.utils.get_default_notifications, help_text="Channels for system notifications: {'email': bool, 'sms': bool, 'whatsapp': bool, 'in_app': bool, 'push': bool}", verbose_name='Notification Settings')),
                ('require_two_factor_auth', models.BooleanField(default=False, verbose_name='Require Two-Factor Authentication')),
                ('password_expiry_days', models.PositiveIntegerField(default=90, verbose_name='Password Expiry Days')),
                ('minimum_password_length', models.PositiveIntegerField(default=8, validators=[django.core.validators.MinValueValidator(6), django.core.validators.MaxValueValidator(50)], verbose_name='Minimum Password Length')),
                ('branch', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='system_settings', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'System Settings',
                'verbose_name_plural': 'System Settings',
            },
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['code', 'company_name'], name='organizatio_code_f8dc91_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['registration_number', 'tax_id'], name='organizatio_registr_d35ca0_idx'),
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['company', 'branch_code'], name='organizatio_company_dca373_idx'),
        ),
        migrations.AddIndex(
            model_name='branch',
            index=models.Index(fields=['is_primary', 'is_headquarters'], name='organizatio_is_prim_f6f058_idx'),
        ),
        migrations.AddConstraint(
            model_name='branch',
            constraint=models.CheckConstraint(condition=models.Q(('fiscal_year_start_month__gte', 1), ('fiscal_year_start_month__lte', 12)), name='valid_fiscal_start_month'),
        ),
        migrations.AddConstraint(
            model_name='branch',
            constraint=models.CheckConstraint(condition=models.Q(('fiscal_year_end_month__gte', 1), ('fiscal_year_end_month__lte', 12)), name='valid_fiscal_end_month'),
        ),
        migrations.AlterUniqueTogether(
            name='branch',
            unique_together={('company', 'branch_code'), ('company', 'branch_name')},
        ),
        migrations.AddIndex(
            model_name='keyboardshortcuts',
            index=models.Index(fields=['branch', 'category', 'is_enabled'], name='organizatio_branch__62573a_idx'),
        ),
        migrations.AddIndex(
            model_name='keyboardshortcuts',
            index=models.Index(fields=['code', 'action_name'], name='organizatio_code_dfa112_idx'),
        ),
        migrations.AddConstraint(
            model_name='keyboardshortcuts',
            constraint=models.CheckConstraint(condition=models.Q(('priority__gt', 0)), name='positive_priority'),
        ),
        migrations.AddConstraint(
            model_name='keyboardshortcuts',
            constraint=models.CheckConstraint(condition=models.Q(('sort_order__gte', 0)), name='non_negative_sort_order'),
        ),
        migrations.AlterUniqueTogether(
            name='keyboardshortcuts',
            unique_together={('branch', 'action_name'), ('branch', 'key_combination', 'context')},
        ),
        migrations.AddIndex(
            model_name='licensetype',
            index=models.Index(fields=['code', 'category'], name='organizatio_code_942ef8_idx'),
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['license_code', 'license_key', 'license_hash'], name='organizatio_license_70f961_idx'),
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['status', 'company'], name='organizatio_status_b0cecd_idx'),
        ),
        migrations.AddIndex(
            model_name='systemconfiguration',
            index=models.Index(fields=['branch', 'config_key'], name='organizatio_branch__1b315d_idx'),
        ),
        migrations.AddIndex(
            model_name='systemconfiguration',
            index=models.Index(fields=['code'], name='organizatio_code_de65d2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='systemconfiguration',
            unique_together={('branch', 'config_key')},
        ),
        migrations.AddConstraint(
            model_name='systemsettings',
            constraint=models.CheckConstraint(condition=models.Q(('connection_timeout__gt', 0)), name='positive_connection_timeout'),
        ),
        migrations.AddConstraint(
            model_name='systemsettings',
            constraint=models.CheckConstraint(condition=models.Q(('session_timeout__gt', 0)), name='positive_session_timeout'),
        ),
        migrations.AddConstraint(
            model_name='systemsettings',
            constraint=models.CheckConstraint(condition=models.Q(('max_login_attempts__gt', 0)), name='positive_max_login_attempts'),
        ),
    ]
