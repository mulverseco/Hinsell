# Generated by Django 5.2.3 on 2025-08-02 08:12

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('organization', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WebhookEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('event_type', models.CharField(help_text="Unique identifier for the event type (e.g., 'user.created', 'inventory.low_stock')", max_length=100, unique=True, verbose_name='Event Type')),
                ('name', models.CharField(help_text='Human-readable name for the event', max_length=200, verbose_name='Event Name')),
                ('category', models.CharField(choices=[('user', 'User Events'), ('inventory', 'Inventory Events'), ('transaction', 'Transaction Events'), ('payment', 'Payment Events'), ('medical', 'Medical Events'), ('system', 'System Events'), ('custom', 'Custom Events')], help_text='Event category for organization', max_length=20, verbose_name='Category')),
                ('description', models.TextField(blank=True, help_text='Detailed description of when this event is triggered', verbose_name='Description')),
                ('payload_schema', models.JSONField(blank=True, default=dict, help_text='JSON schema describing the event payload structure', verbose_name='Payload Schema')),
                ('is_system_event', models.BooleanField(default=False, help_text='Whether this is a built-in system event', verbose_name='System Event')),
                ('requires_permission', models.CharField(blank=True, help_text='Permission required to subscribe to this event', max_length=100, null=True, verbose_name='Required Permission')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Webhook Event',
                'verbose_name_plural': 'Webhook Events',
            },
        ),
        migrations.CreateModel(
            name='WebhookEndpoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('name', models.CharField(help_text='Descriptive name for this webhook endpoint', max_length=200, verbose_name='Endpoint Name')),
                ('url', models.URLField(help_text='URL where webhook payloads will be sent', max_length=500, validators=[django.core.validators.URLValidator()], verbose_name='Webhook URL')),
                ('secret_key', models.CharField(help_text='Secret key for HMAC signature verification', max_length=255, verbose_name='Secret Key')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('failed', 'Failed')], default='active', help_text='Current status of the webhook endpoint', max_length=10, verbose_name='Status')),
                ('http_method', models.CharField(choices=[('POST', 'POST'), ('PUT', 'PUT'), ('PATCH', 'PATCH')], default='POST', help_text='HTTP method to use for webhook delivery', max_length=10, verbose_name='HTTP Method')),
                ('content_type', models.CharField(default='application/json', help_text='Content-Type header for webhook requests', max_length=50, verbose_name='Content Type')),
                ('custom_headers', models.JSONField(blank=True, default=dict, help_text='Additional HTTP headers to include in webhook requests', verbose_name='Custom Headers')),
                ('max_retries', models.PositiveIntegerField(default=5, help_text='Maximum number of delivery retry attempts', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Max Retries')),
                ('retry_delay', models.PositiveIntegerField(default=60, help_text='Initial retry delay in seconds (exponential backoff)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3600)], verbose_name='Retry Delay')),
                ('timeout', models.PositiveIntegerField(default=30, help_text='Request timeout in seconds', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(300)], verbose_name='Timeout')),
                ('filter_conditions', models.JSONField(blank=True, default=dict, help_text='Conditions to filter which events trigger this webhook', verbose_name='Filter Conditions')),
                ('total_deliveries', models.PositiveIntegerField(default=0, help_text='Total number of delivery attempts', verbose_name='Total Deliveries')),
                ('successful_deliveries', models.PositiveIntegerField(default=0, help_text='Number of successful deliveries', verbose_name='Successful Deliveries')),
                ('failed_deliveries', models.PositiveIntegerField(default=0, help_text='Number of failed deliveries', verbose_name='Failed Deliveries')),
                ('last_delivery_at', models.DateTimeField(blank=True, help_text='Timestamp of last delivery attempt', null=True, verbose_name='Last Delivery')),
                ('last_success_at', models.DateTimeField(blank=True, help_text='Timestamp of last successful delivery', null=True, verbose_name='Last Success')),
                ('consecutive_failures', models.PositiveIntegerField(default=0, help_text='Number of consecutive failed deliveries', verbose_name='Consecutive Failures')),
                ('failure_threshold', models.PositiveIntegerField(default=10, help_text='Number of consecutive failures before suspending endpoint', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Failure Threshold')),
                ('suspended_until', models.DateTimeField(blank=True, help_text='Timestamp until which endpoint is suspended', null=True, verbose_name='Suspended Until')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhook_endpoints', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('subscribed_events', models.ManyToManyField(help_text='Events this endpoint is subscribed to', related_name='endpoints', to='webhooks.webhookevent', verbose_name='Subscribed Events')),
            ],
            options={
                'verbose_name': 'Webhook Endpoint',
                'verbose_name_plural': 'Webhook Endpoints',
            },
        ),
        migrations.CreateModel(
            name='WebhookEventLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('event_id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for this event', unique=True, verbose_name='Event ID')),
                ('event_type', models.CharField(help_text='Type of event that occurred', max_length=100, verbose_name='Event Type')),
                ('source_object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='Source Object ID')),
                ('event_data', models.JSONField(help_text='Data associated with the event', verbose_name='Event Data')),
                ('endpoints_notified', models.PositiveIntegerField(default=0, help_text='Number of endpoints that were notified', verbose_name='Endpoints Notified')),
                ('successful_deliveries', models.PositiveIntegerField(default=0, help_text='Number of successful deliveries', verbose_name='Successful Deliveries')),
                ('failed_deliveries', models.PositiveIntegerField(default=0, help_text='Number of failed deliveries', verbose_name='Failed Deliveries')),
                ('is_processed', models.BooleanField(default=False, help_text='Whether event has been processed for webhook delivery', verbose_name='Processed')),
                ('processed_at', models.DateTimeField(blank=True, help_text='Timestamp when event was processed', null=True, verbose_name='Processed At')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhook_event_logs', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('source_content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Source Content Type')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Webhook Event Log',
                'verbose_name_plural': 'Webhook Event Logs',
            },
        ),
        migrations.CreateModel(
            name='WebhookDelivery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('event_type', models.CharField(help_text='Type of event that triggered this delivery', max_length=100, verbose_name='Event Type')),
                ('event_id', models.UUIDField(help_text='Unique identifier for the event', verbose_name='Event ID')),
                ('payload', models.JSONField(help_text='JSON payload sent to webhook endpoint', verbose_name='Payload')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sending', 'Sending'), ('success', 'Success'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', help_text='Current delivery status', max_length=10, verbose_name='Status')),
                ('request_headers', models.JSONField(blank=True, default=dict, help_text='HTTP headers sent with the request', verbose_name='Request Headers')),
                ('request_body', models.TextField(blank=True, help_text='Raw request body sent', verbose_name='Request Body')),
                ('response_status_code', models.PositiveIntegerField(blank=True, help_text='HTTP status code received', null=True, verbose_name='Response Status Code')),
                ('response_headers', models.JSONField(blank=True, default=dict, help_text='HTTP headers received in response', verbose_name='Response Headers')),
                ('response_body', models.TextField(blank=True, help_text='Response body received', verbose_name='Response Body')),
                ('sent_at', models.DateTimeField(blank=True, help_text='Timestamp when request was sent', null=True, verbose_name='Sent At')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Timestamp when delivery completed', null=True, verbose_name='Completed At')),
                ('duration_ms', models.PositiveIntegerField(blank=True, help_text='Request duration in milliseconds', null=True, verbose_name='Duration (ms)')),
                ('attempt_number', models.PositiveIntegerField(default=1, help_text='Delivery attempt number (1 for first attempt)', verbose_name='Attempt Number')),
                ('max_attempts', models.PositiveIntegerField(default=1, help_text='Maximum number of attempts for this delivery', verbose_name='Max Attempts')),
                ('next_retry_at', models.DateTimeField(blank=True, help_text='Timestamp for next retry attempt', null=True, verbose_name='Next Retry At')),
                ('error_message', models.TextField(blank=True, help_text='Error message if delivery failed', verbose_name='Error Message')),
                ('error_code', models.CharField(blank=True, help_text='Error code for categorizing failures', max_length=50, null=True, verbose_name='Error Code')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('endpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to='webhooks.webhookendpoint', verbose_name='Webhook Endpoint')),
            ],
            options={
                'verbose_name': 'Webhook Delivery',
                'verbose_name_plural': 'Webhook Deliveries',
                'indexes': [models.Index(fields=['endpoint', 'status'], name='webhooks_we_endpoin_740ee0_idx'), models.Index(fields=['event_type', 'created_at'], name='webhooks_we_event_t_599af1_idx'), models.Index(fields=['status', 'next_retry_at'], name='webhooks_we_status_eb2625_idx'), models.Index(fields=['created_at'], name='webhooks_we_created_d5a8af_idx'), models.Index(fields=['event_id'], name='webhooks_we_event_i_5060e4_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['event_type'], name='webhooks_we_event_t_4485c9_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['category'], name='webhooks_we_categor_82d9be_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['is_active'], name='webhooks_we_is_acti_a08cc8_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookendpoint',
            index=models.Index(fields=['branch', 'status'], name='webhooks_we_branch__d96f6e_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookendpoint',
            index=models.Index(fields=['status'], name='webhooks_we_status_d88432_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookendpoint',
            index=models.Index(fields=['last_delivery_at'], name='webhooks_we_last_de_6c5330_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookendpoint',
            index=models.Index(fields=['consecutive_failures'], name='webhooks_we_consecu_f307ff_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='webhookendpoint',
            unique_together={('branch', 'name')},
        ),
        migrations.AddIndex(
            model_name='webhookeventlog',
            index=models.Index(fields=['branch', 'event_type'], name='webhooks_we_branch__e82982_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookeventlog',
            index=models.Index(fields=['event_id'], name='webhooks_we_event_i_90e129_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookeventlog',
            index=models.Index(fields=['event_type', 'created_at'], name='webhooks_we_event_t_d1e7d0_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookeventlog',
            index=models.Index(fields=['is_processed'], name='webhooks_we_is_proc_a17387_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookeventlog',
            index=models.Index(fields=['source_content_type', 'source_object_id'], name='webhooks_we_source__390109_idx'),
        ),
    ]
