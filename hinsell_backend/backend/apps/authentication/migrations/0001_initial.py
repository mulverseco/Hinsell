# Generated by Django 5.2.3 on 2025-06-25 08:42

import apps.authentication.models
import apps.core_apps.validators
import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('action_type', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('login_failed', 'Login Failed'), ('password_change', 'Password Change'), ('profile_update', 'Profile Update'), ('permission_change', 'Permission Change'), ('data_access', 'Data Access'), ('data_modification', 'Data Modification'), ('system_access', 'System Access'), ('account_locked', 'Account Locked'), ('account_unlocked', 'Account Unlocked')], default='login', help_text='Type of action performed', max_length=20, verbose_name='Action Type')),
                ('username', models.CharField(blank=True, help_text='Username at time of action', max_length=100, null=True, verbose_name='Username')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address from which action was performed', null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, help_text='Browser/client user agent string', verbose_name='User Agent')),
                ('device_type', models.CharField(blank=True, help_text='Type of device used', max_length=50, verbose_name='Device Type')),
                ('login_status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('blocked', 'Blocked'), ('suspicious', 'Suspicious')], default='success', help_text='Status of the action', max_length=20, verbose_name='Status')),
                ('session_id', models.CharField(blank=True, help_text='Session identifier', max_length=100, null=True, verbose_name='Session ID')),
                ('country', models.CharField(blank=True, help_text='Country from which action was performed', max_length=100, null=True, verbose_name='Country')),
                ('city', models.CharField(blank=True, help_text='City from which action was performed', max_length=100, null=True, verbose_name='City')),
                ('computer_name', models.CharField(blank=True, help_text='Name of the computer used', max_length=255, null=True, verbose_name='Computer Name')),
                ('screen_name', models.CharField(blank=True, help_text='Screen or form accessed', max_length=100, null=True, verbose_name='Screen Name')),
                ('details', models.JSONField(blank=True, default=dict, help_text='Additional information about the action', verbose_name='Additional Details')),
                ('risk_score', models.PositiveIntegerField(default=0, help_text='Calculated risk score (0-100)', verbose_name='Risk Score')),
                ('risk_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='low', help_text='Assessed risk level', max_length=10, verbose_name='Risk Level')),
                ('is_suspicious', models.BooleanField(default=False, help_text='Whether this activity is flagged as suspicious', verbose_name='Suspicious Activity')),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('avatar', models.ImageField(blank=True, help_text='Profile picture', null=True, upload_to=apps.authentication.models.upload_avatar, verbose_name='Avatar')),
                ('bio', models.TextField(blank=True, help_text='Brief description about the user', max_length=500, verbose_name='Biography')),
                ('email', models.EmailField(blank=True, help_text='Primary email address for notifications', max_length=255, null=True, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email Address')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Primary phone number for notifications', max_length=128, null=True, region=None, verbose_name='Phone Number')),
                ('address', models.TextField(blank=True, help_text='Physical address', verbose_name='Address')),
                ('nationality', models.CharField(blank=True, help_text="User's nationality", max_length=50, null=True, verbose_name='Nationality')),
                ('date_of_birth', models.DateField(blank=True, help_text="User's date of birth", null=True, verbose_name='Date of Birth')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('prefer_not_to_say', 'Prefer Not to Say'), ('other', 'Other')], default='prefer_not_to_say', help_text="User's gender", max_length=20, verbose_name='Gender')),
                ('emergency_contact_name', models.CharField(blank=True, help_text='Name of emergency contact person', max_length=100, verbose_name='Emergency Contact Name')),
                ('emergency_contact_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Phone number of emergency contact', max_length=128, null=True, region=None, verbose_name='Emergency Contact Phone')),
                ('enable_email_notifications', models.BooleanField(default=True, help_text='Enable system email notifications', verbose_name='Enable Email Notifications')),
                ('enable_sms_notifications', models.BooleanField(default=False, help_text='Enable system SMS notifications', verbose_name='Enable SMS Notifications')),
                ('enable_whatsapp_notifications', models.BooleanField(default=False, help_text='Enable system WhatsApp notifications', verbose_name='Enable WhatsApp Notifications')),
                ('enable_in_app_notifications', models.BooleanField(default=False, help_text='Enable system In-App notifications', verbose_name='Enable In-App Notifications')),
                ('enable_push_notifications', models.BooleanField(default=False, help_text='Enable system Push notifications', verbose_name='Enable Push Notifications')),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('colleagues', 'Colleagues Only')], default='colleagues', help_text='Who can view this profile', max_length=20, verbose_name='Profile Visibility')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('username', models.CharField(help_text='Required. 50 characters or fewer. Letters, digits, underscores, and hyphens only.', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Username can only contain letters, numbers, underscores, and hyphens.', regex='^[a-zA-Z0-9_-]+$')], verbose_name='Username')),
                ('first_name', models.CharField(blank=True, help_text="User's first name", max_length=30, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, help_text="User's last name", max_length=30, verbose_name='Last Name')),
                ('employee_id', models.CharField(blank=True, help_text='Unique employee identifier', max_length=50, null=True, unique=True, verbose_name='Employee ID')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into the admin site.', verbose_name='Staff Status')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='Superuser Status')),
                ('is_two_factor_enabled', models.BooleanField(default=False, help_text='Whether two-factor authentication is enabled for this user', verbose_name='Two-Factor Authentication Enabled')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, help_text='Number of consecutive failed login attempts')),
                ('account_locked_until', models.DateTimeField(blank=True, help_text='Timestamp until which the account is locked', null=True)),
                ('password_changed_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when password was last changed')),
                ('last_login_device', models.CharField(blank=True, help_text='Device information from last login', max_length=255, null=True, verbose_name='Last Login Device')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='IP address from last login', null=True, verbose_name='Last Login IP Address')),
                ('use_control_panel', models.BooleanField(default=False, help_text='Can access administrative control panel', verbose_name='Control Panel Access')),
                ('use_reports', models.BooleanField(default=False, help_text='Can access and generate reports', verbose_name='Reports Access')),
                ('use_ledger_system', models.BooleanField(default=False, help_text='Can access financial ledger system', verbose_name='Ledger System Access')),
                ('use_inventory_system', models.BooleanField(default=False, help_text='Can access inventory management system', verbose_name='Inventory System Access')),
                ('use_purchase_system', models.BooleanField(default=False, help_text='Can access purchase management system', verbose_name='Purchase System Access')),
                ('use_sales_system', models.BooleanField(default=False, help_text='Can access sales management system', verbose_name='Sales System Access')),
                ('use_medical_management', models.BooleanField(default=False, help_text='Can access medical management system', verbose_name='Medical Management Access')),
                ('hide_cost', models.BooleanField(default=False, help_text='Hide cost information in user interface', verbose_name='Hide Cost Information')),
                ('hide_comment', models.BooleanField(default=False, help_text='Hide comments in user interface', verbose_name='Hide Comments')),
                ('user_discount_ratio', models.DecimalField(decimal_places=2, default=0, help_text='Maximum discount percentage this user can apply', max_digits=5, validators=[apps.core_apps.validators.validate_percentage], verbose_name='User Discount Ratio')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
    ]
