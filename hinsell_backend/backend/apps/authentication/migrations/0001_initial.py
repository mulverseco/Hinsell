# Generated by Django 5.2.3 on 2025-08-02 08:12

import apps.core_apps.utils
import apps.core_apps.validators
import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('action_type', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('login_failed', 'Login Failed'), ('password_change', 'Password Change'), ('profile_update', 'Profile Update'), ('permission_change', 'Permission Change'), ('data_access', 'Data Access'), ('data_modification', 'Data Modification'), ('system_access', 'System Access'), ('account_locked', 'Account Locked'), ('account_unlocked', 'Account Unlocked'), ('loyalty_points_added', 'Loyalty Points Added'), ('loyalty_points_redeemed', 'Loyalty Points Redeemed'), ('terms_accepted', 'Terms Accepted'), ('consent_updated', 'Consent Updated'), ('profile_deletion', 'Profile Deletion'), ('push_token_updated', 'Push Token Updated')], default='login', max_length=50, verbose_name='Action Type')),
                ('username', models.CharField(blank=True, max_length=100, null=True, verbose_name='Username')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('device_type', models.CharField(blank=True, max_length=50, verbose_name='Device Type')),
                ('login_status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('blocked', 'Blocked')], default='success', max_length=20, verbose_name='Status')),
                ('session_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Session ID')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='City')),
                ('details', models.JSONField(blank=True, default=dict, verbose_name='Additional Details')),
                ('risk_score', models.PositiveIntegerField(default=0, verbose_name='Risk Score')),
                ('risk_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='low', max_length=10, verbose_name='Risk Level')),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Biography')),
                ('push_token', models.CharField(blank=True, db_index=True, help_text='Device token for push notifications (e.g., FCM or APNs token)', max_length=255, null=True, verbose_name='Push Notification Token')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Phone Number')),
                ('address', models.TextField(blank=True, verbose_name='Address')),
                ('nationality', models.CharField(blank=True, max_length=50, null=True, verbose_name='Nationality')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('prefer_not_to_say', 'Prefer Not to Say')], default='prefer_not_to_say', max_length=20, verbose_name='Gender')),
                ('notifications', models.JSONField(default=apps.core_apps.utils.get_default_notifications, help_text="Channels for notifications: {'email': bool, 'sms': bool, 'whatsapp': bool, 'in_app': bool, 'push': bool}", verbose_name='Notification Settings')),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('colleagues', 'Colleagues Only')], default='public', max_length=20, verbose_name='Profile Visibility')),
                ('preferred_payment_method', models.CharField(choices=[('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('paypal', 'PayPal'), ('cash_on_delivery', 'Cash on Delivery')], default='credit_card', max_length=20, verbose_name='Preferred Payment Method')),
                ('marketing_opt_in', models.BooleanField(default=False, verbose_name='Marketing Opt-In')),
                ('terms_accepted', models.BooleanField(default=False, verbose_name='Terms and Conditions Accepted')),
                ('terms_accepted_at', models.DateTimeField(blank=True, null=True, verbose_name='Terms Accepted At')),
                ('terms_version', models.CharField(blank=True, help_text='Version of the terms and conditions accepted by the user.', max_length=20, null=True, verbose_name='Terms Version')),
                ('data_consent', models.JSONField(default=apps.core_apps.utils.get_default_data_consent, help_text="User consent for data usage: {'data_processing': bool, 'marketing': bool, 'analytics': bool, 'data_sharing': bool}", verbose_name='Data Consent Preferences')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('username', models.CharField(max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Username can only contain letters, numbers, underscores, and hyphens.', regex='^[a-zA-Z0-9_-]+$')], verbose_name='Username')),
                ('email', models.EmailField(max_length=255, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email Address')),
                ('user_type', models.CharField(choices=[('customer', 'Customer'), ('vip', 'VIP Customer'), ('guest', 'Guest'), ('partner', 'Partner'), ('employee', 'Employee'), ('manager', 'Manager'), ('admin', 'Admin')], default='customer', help_text='Type of user account', max_length=20, verbose_name='User Type')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='Last Name')),
                ('code', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Employee Code')),
                ('is_two_factor_enabled', models.BooleanField(default=False, verbose_name='Two-Factor Authentication Enabled')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into the admin site.', verbose_name='Staff Status')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, verbose_name='Failed Login Attempts')),
                ('account_locked_until', models.DateTimeField(blank=True, null=True, verbose_name='Account Locked Until')),
                ('password_changed_at', models.DateTimeField(auto_now_add=True, verbose_name='Password Changed At')),
                ('last_login_device', models.CharField(blank=True, max_length=255, null=True, verbose_name='Last Login Device')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Last Login IP Address')),
                ('hide_cost', models.BooleanField(default=False, verbose_name='Hide Cost Information')),
                ('hide_comment', models.BooleanField(default=False, verbose_name='Hide Comments')),
                ('user_discount_ratio', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[apps.core_apps.validators.validate_percentage], verbose_name='User Discount Ratio')),
                ('loyalty_points', models.PositiveIntegerField(default=0, verbose_name='Loyalty Points')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='Last Activity')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
    ]
