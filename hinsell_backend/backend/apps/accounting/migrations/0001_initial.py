# Generated by Django 5.2.3 on 2025-06-25 08:42

import apps.core_apps.validators
import django.core.validators
import phonenumber_field.modelfields
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('account_code', models.CharField(help_text='Unique account code', max_length=20, verbose_name='Account Code')),
                ('account_name', models.CharField(help_text='Account display name', max_length=250, verbose_name='Account Name')),
                ('account_name_english', models.CharField(blank=True, help_text='Account name in English', max_length=250, null=True, verbose_name='Account Name (English)')),
                ('account_nature', models.CharField(choices=[('customer', 'Customer'), ('supplier', 'Supplier'), ('bank', 'Bank'), ('cash', 'Cash'), ('inventory', 'Inventory'), ('fixed_asset', 'Fixed Asset'), ('other', 'Other')], default='other', help_text='Nature/purpose of this account', max_length=20, verbose_name='Account Nature')),
                ('is_header', models.BooleanField(default=False, help_text='Whether this is a header/summary account', verbose_name='Header Account')),
                ('is_hidden', models.BooleanField(default=False, help_text='Hide this account from normal views', verbose_name='Hidden')),
                ('is_system', models.BooleanField(default=False, help_text='System-generated account (cannot be deleted)', verbose_name='System Account')),
                ('is_taxable', models.BooleanField(default=False, help_text='Whether transactions on this account are taxable', verbose_name='Taxable')),
                ('tax_code', models.CharField(blank=True, help_text='Tax code for this account', max_length=20, null=True, verbose_name='Tax Code')),
                ('commission_ratio', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Commission percentage for this account', max_digits=5, validators=[apps.core_apps.validators.validate_percentage], verbose_name='Commission Ratio')),
                ('credit_limit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Maximum credit limit for this account', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Credit Limit')),
                ('debit_limit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Maximum debit limit for this account', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Debit Limit')),
                ('email', models.EmailField(blank=True, help_text='Contact email address', max_length=255, null=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email Address')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Contact phone number', max_length=128, null=True, region=None, verbose_name='Phone Number')),
                ('mobile_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Contact mobile number', max_length=128, null=True, region=None, verbose_name='Mobile Number')),
                ('fax_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Contact fax number', max_length=128, null=True, region=None, verbose_name='Fax Number')),
                ('address', models.TextField(blank=True, help_text='Contact address', verbose_name='Address')),
                ('tax_registration_number', models.CharField(blank=True, help_text='Tax registration number', max_length=50, null=True, verbose_name='Tax Registration Number')),
                ('commercial_registration', models.CharField(blank=True, help_text='Commercial registration number', max_length=50, null=True, verbose_name='Commercial Registration')),
                ('stop_sales', models.BooleanField(default=False, help_text='Prevent sales to this account', verbose_name='Stop Sales')),
                ('current_balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Current account balance', max_digits=15, verbose_name='Current Balance')),
                ('budget_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Budgeted amount for this account', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Budget Amount')),
                ('enable_email_notifications', models.BooleanField(default=True, help_text='Enable system email notifications', verbose_name='Enable Email Notifications')),
                ('enable_sms_notifications', models.BooleanField(default=False, help_text='Enable system SMS notifications', verbose_name='Enable SMS Notifications')),
                ('enable_whatsapp_notifications', models.BooleanField(default=False, help_text='Enable system WhatsApp notifications', verbose_name='Enable WhatsApp Notifications')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
            },
        ),
        migrations.CreateModel(
            name='AccountingPeriod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('period_code', models.CharField(max_length=10)),
                ('period_name', models.CharField(max_length=50)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('fiscal_year', models.IntegerField()),
                ('is_closed', models.BooleanField(default=False)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Accounting Period',
                'verbose_name_plural': 'Accounting Periods',
            },
        ),
        migrations.CreateModel(
            name='AccountType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('type_code', models.CharField(help_text='Unique code for this account type', max_length=10, verbose_name='Type Code')),
                ('type_name', models.CharField(help_text='Display name for this account type', max_length=100, verbose_name='Type Name')),
                ('category', models.CharField(choices=[('asset', 'Asset'), ('liability', 'Liability'), ('equity', 'Equity'), ('revenue', 'Revenue'), ('expense', 'Expense'), ('cogs', 'Cost of Goods Sold')], help_text='Financial statement category', max_length=20, verbose_name='Category')),
                ('normal_balance', models.CharField(choices=[('debit', 'Debit'), ('credit', 'Credit')], help_text='Normal balance side for this account type', max_length=6, verbose_name='Normal Balance')),
            ],
            options={
                'verbose_name': 'Account Type',
                'verbose_name_plural': 'Account Types',
            },
        ),
        migrations.CreateModel(
            name='Budget',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('budget_code', models.CharField(max_length=20)),
                ('budget_name', models.CharField(max_length=100)),
                ('fiscal_year', models.IntegerField()),
                ('budgeted_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('actual_amount', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('variance_amount', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
            ],
            options={
                'verbose_name': 'Budget',
                'verbose_name_plural': 'Budgets',
            },
        ),
        migrations.CreateModel(
            name='CostCenter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('cost_center_code', models.CharField(help_text='Unique cost center code', max_length=20, verbose_name='Cost Center Code')),
                ('cost_center_name', models.CharField(help_text='Cost center display name', max_length=100, verbose_name='Cost Center Name')),
                ('is_header', models.BooleanField(default=False, help_text='Whether this is a header/summary cost center', verbose_name='Header Cost Center')),
                ('budget_limit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Budget limit for this cost center', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Budget Limit')),
            ],
            options={
                'verbose_name': 'Cost Center',
                'verbose_name_plural': 'Cost Centers',
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('currency_code', models.CharField(help_text='ISO currency code (e.g., USD, EUR)', max_length=5, verbose_name='Currency Code')),
                ('currency_name', models.CharField(help_text='Full currency name', max_length=50, verbose_name='Currency Name')),
                ('currency_symbol', models.CharField(blank=True, help_text='Currency symbol (e.g., $, €)', max_length=5, null=True, verbose_name='Currency Symbol')),
                ('is_local', models.BooleanField(default=False, help_text='Whether this is the local/base currency', verbose_name='Local Currency')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default currency for the branch', verbose_name='Default Currency')),
                ('fraction_name', models.CharField(blank=True, help_text='Name of currency fraction (e.g., cents, pence)', max_length=20, null=True, verbose_name='Fraction Name')),
                ('decimal_places', models.PositiveIntegerField(default=2, help_text='Number of decimal places for this currency', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(6)], verbose_name='Decimal Places')),
                ('exchange_rate', models.DecimalField(decimal_places=8, default=Decimal('1.00000000'), help_text='Exchange rate relative to base currency', max_digits=15, validators=[apps.core_apps.validators.validate_positive_decimal], verbose_name='Exchange Rate')),
                ('exchange_rate_date', models.DateTimeField(auto_now=True, help_text='Date when exchange rate was last updated', verbose_name='Exchange Rate Date')),
                ('upper_limit', models.DecimalField(decimal_places=8, default=Decimal('0E-8'), help_text='Upper limit for exchange rate validation', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Upper Limit')),
                ('lower_limit', models.DecimalField(decimal_places=8, default=Decimal('0E-8'), help_text='Lower limit for exchange rate validation', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Lower Limit')),
            ],
            options={
                'verbose_name': 'Currency',
                'verbose_name_plural': 'Currencies',
            },
        ),
        migrations.CreateModel(
            name='CurrencyHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('old_exchange_rate', models.DecimalField(decimal_places=8, max_digits=15, verbose_name='Old Exchange Rate')),
                ('new_exchange_rate', models.DecimalField(decimal_places=8, max_digits=15, verbose_name='New Exchange Rate')),
                ('reason', models.TextField(blank=True, help_text='Reason for exchange rate change', null=True, verbose_name='Reason')),
            ],
            options={
                'verbose_name': 'Currency History',
                'verbose_name_plural': 'Currency History',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OpeningBalance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('fiscal_year', models.IntegerField()),
                ('opening_date', models.DateField()),
                ('debit_amount', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('credit_amount', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('quantity', models.DecimalField(decimal_places=8, default=0, max_digits=18)),
                ('unit_cost', models.DecimalField(decimal_places=4, default=0, max_digits=15)),
            ],
            options={
                'verbose_name': 'Opening Balance',
                'verbose_name_plural': 'Opening Balances',
            },
        ),
    ]
