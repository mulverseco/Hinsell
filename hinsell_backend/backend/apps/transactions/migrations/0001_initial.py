# Generated by Django 5.2.3 on 2025-06-25 08:42

import apps.core_apps.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounting', '0002_initial'),
        ('inventory', '0001_initial'),
        ('organization', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TransactionType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('type_code', models.CharField(help_text='Unique transaction type code', max_length=10, verbose_name='Type Code')),
                ('type_name', models.CharField(help_text='Transaction type display name', max_length=100, verbose_name='Type Name')),
                ('category', models.CharField(choices=[('sales', 'Sales'), ('purchase', 'Purchase'), ('payment', 'Payment'), ('receipt', 'Receipt'), ('journal', 'Journal Entry'), ('adjustment', 'Inventory Adjustment'), ('transfer', 'Transfer')], help_text='Transaction category', max_length=20, verbose_name='Category')),
                ('affects_inventory', models.BooleanField(default=True, help_text='Whether this transaction type affects inventory', verbose_name='Affects Inventory')),
                ('affects_accounts', models.BooleanField(default=True, help_text='Whether this transaction type affects account balances', verbose_name='Affects Accounts')),
                ('requires_approval', models.BooleanField(default=False, help_text='Whether transactions of this type require approval', verbose_name='Requires Approval')),
                ('auto_post', models.BooleanField(default=True, help_text='Whether to automatically post transactions of this type', verbose_name='Auto Post')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transaction_types', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('default_credit_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='credit_transaction_types', to='accounting.account', verbose_name='Default Credit Account')),
                ('default_debit_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='debit_transaction_types', to='accounting.account', verbose_name='Default Debit Account')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transaction Type',
                'verbose_name_plural': 'Transaction Types',
            },
        ),
        migrations.CreateModel(
            name='TransactionHeader',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('transaction_number', models.CharField(help_text='Unique transaction number', max_length=50, verbose_name='Transaction Number')),
                ('reference_number', models.CharField(blank=True, help_text='External reference number', max_length=50, null=True, verbose_name='Reference Number')),
                ('transaction_date', models.DateField(default=django.utils.timezone.now, help_text='Date of the transaction', verbose_name='Transaction Date')),
                ('due_date', models.DateField(blank=True, help_text='Payment due date (for credit transactions)', null=True, verbose_name='Due Date')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Approval'), ('approved', 'Approved'), ('posted', 'Posted'), ('cancelled', 'Cancelled'), ('reversed', 'Reversed')], default='draft', help_text='Current transaction status', max_length=10, verbose_name='Status')),
                ('exchange_rate', models.DecimalField(decimal_places=8, default=Decimal('1.00000000'), help_text='Exchange rate at time of transaction', max_digits=15, validators=[apps.core_apps.validators.validate_positive_decimal], verbose_name='Exchange Rate')),
                ('subtotal_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Subtotal before taxes and discounts', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Subtotal Amount')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discount amount', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Discount Amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total tax amount', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Tax Amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Final total amount', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Total Amount')),
                ('paid_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount already paid', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Paid Amount')),
                ('payment_terms', models.CharField(blank=True, help_text='Payment terms description', max_length=50, null=True, verbose_name='Payment Terms')),
                ('credit_days', models.PositiveIntegerField(default=0, help_text='Number of credit days allowed', verbose_name='Credit Days')),
                ('notes', models.TextField(blank=True, help_text='Additional notes or comments', verbose_name='Notes')),
                ('internal_notes', models.TextField(blank=True, help_text='Internal notes (not visible to customers)', verbose_name='Internal Notes')),
                ('approved_at', models.DateTimeField(blank=True, help_text='Timestamp when transaction was approved', null=True, verbose_name='Approved At')),
                ('posted_at', models.DateTimeField(blank=True, help_text='Timestamp when transaction was posted', null=True, verbose_name='Posted At')),
                ('reversed_at', models.DateTimeField(blank=True, help_text='Timestamp when transaction was reversed', null=True, verbose_name='Reversed At')),
                ('reversal_reason', models.TextField(blank=True, help_text='Reason for transaction reversal', null=True, verbose_name='Reversal Reason')),
                ('approved_by', models.ForeignKey(blank=True, help_text='User who approved this transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_transactions', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transaction_headers', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('currency', models.ForeignKey(help_text='Transaction currency', on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='accounting.currency', verbose_name='Currency')),
                ('customer_account', models.ForeignKey(blank=True, help_text='Customer account for sales transactions', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='customer_transactions', to='accounting.account', verbose_name='Customer Account')),
                ('posted_by', models.ForeignKey(blank=True, help_text='User who posted this transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posted_transactions', to=settings.AUTH_USER_MODEL, verbose_name='Posted By')),
                ('reversed_by', models.ForeignKey(blank=True, help_text='User who reversed this transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reversed_transactions', to=settings.AUTH_USER_MODEL, verbose_name='Reversed By')),
                ('supplier_account', models.ForeignKey(blank=True, help_text='Supplier account for purchase transactions', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='supplier_transactions', to='accounting.account', verbose_name='Supplier Account')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('transaction_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='transactions.transactiontype', verbose_name='Transaction Type')),
            ],
            options={
                'verbose_name': 'Transaction Header',
                'verbose_name_plural': 'Transaction Headers',
            },
        ),
        migrations.CreateModel(
            name='TransactionDetail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('line_number', models.PositiveIntegerField(help_text='Line sequence number', verbose_name='Line Number')),
                ('quantity', models.DecimalField(decimal_places=8, default=Decimal('0E-8'), help_text='Quantity in the specified unit', max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Quantity')),
                ('base_quantity', models.DecimalField(decimal_places=8, default=Decimal('0E-8'), help_text='Quantity in base units', max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Base Quantity')),
                ('unit_size', models.DecimalField(decimal_places=8, default=Decimal('1.00000000'), help_text='Conversion factor to base units', max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('1E-8'))], verbose_name='Unit Size')),
                ('bonus_quantity', models.DecimalField(decimal_places=8, default=Decimal('0E-8'), help_text='Free/bonus quantity', max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Bonus Quantity')),
                ('unit_price', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Price per unit', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Unit Price')),
                ('unit_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Cost per unit', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Unit Cost')),
                ('line_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total amount for this line (quantity × unit price)', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Line Total')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage applied', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Discount Percentage')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discount amount for this line', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Discount Amount')),
                ('tax_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Tax percentage applied', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='Tax Percentage')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total tax amount for this line', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Tax Amount')),
                ('batch_number', models.CharField(blank=True, help_text='Manufacturing batch number', max_length=50, null=True, verbose_name='Batch Number')),
                ('expiry_date', models.DateField(blank=True, help_text='Product expiration date', null=True, verbose_name='Expiry Date')),
                ('description', models.TextField(blank=True, help_text='Additional description for this line', verbose_name='Description')),
                ('notes', models.TextField(blank=True, help_text='Additional notes for this line', verbose_name='Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transaction_details', to='inventory.item', verbose_name='Item')),
                ('item_unit', models.ForeignKey(blank=True, help_text='Unit of measure for this line', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='transaction_details', to='inventory.itemunit', verbose_name='Item Unit')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('header', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='details', to='transactions.transactionheader', verbose_name='Transaction Header')),
            ],
            options={
                'verbose_name': 'Transaction Detail',
                'verbose_name_plural': 'Transaction Details',
                'indexes': [models.Index(fields=['header'], name='transaction_header__e048ea_idx'), models.Index(fields=['item'], name='transaction_item_id_f41d58_idx'), models.Index(fields=['batch_number'], name='transaction_batch_n_210bb8_idx'), models.Index(fields=['expiry_date'], name='transaction_expiry__e05fcc_idx'), models.Index(fields=['line_number'], name='transaction_line_nu_c743e5_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('quantity__gte', 0)), name='transaction_non_negative_quantity'), models.CheckConstraint(condition=models.Q(('unit_size__gt', 0)), name='transaction_positive_unit_size'), models.CheckConstraint(condition=models.Q(('discount_percentage__gte', 0), ('discount_percentage__lte', 100)), name='transaction_valid_discount_percentage'), models.CheckConstraint(condition=models.Q(('tax_percentage__gte', 0), ('tax_percentage__lte', 100)), name='transaction_valid_tax_percentage')],
                'unique_together': {('header', 'line_number')},
            },
        ),
        migrations.CreateModel(
            name='LedgerEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('entry_date', models.DateField(help_text='Date of the ledger entry', verbose_name='Entry Date')),
                ('debit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Debit amount in local currency', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Debit Amount')),
                ('credit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Credit amount in local currency', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Credit Amount')),
                ('foreign_debit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Debit amount in foreign currency', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Foreign Debit Amount')),
                ('foreign_credit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Credit amount in foreign currency', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Foreign Credit Amount')),
                ('exchange_rate', models.DecimalField(decimal_places=8, default=Decimal('1.00000000'), max_digits=15, validators=[apps.core_apps.validators.validate_positive_decimal], verbose_name='Exchange Rate')),
                ('is_posted', models.BooleanField(default=False, help_text='Whether this entry has been posted', verbose_name='Posted')),
                ('is_reversed', models.BooleanField(default=False, help_text='Whether this entry has been reversed', verbose_name='Reversed')),
                ('description', models.CharField(help_text='Entry description', max_length=255, verbose_name='Description')),
                ('reference', models.CharField(blank=True, help_text='Additional reference information', max_length=100, null=True, verbose_name='Reference')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ledger_entries', to='accounting.account', verbose_name='Account')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ledger_entries', to='organization.branch', verbose_name='Branch')),
                ('cost_center', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ledger_entries', to='accounting.costcenter', verbose_name='Cost Center')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ledger_entries', to='accounting.currency', verbose_name='Currency')),
                ('reversal_entry', models.ForeignKey(blank=True, help_text='Entry that reverses this entry', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reversed_entries', to='transactions.ledgerentry', verbose_name='Reversal Entry')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('transaction_header', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ledger_entries', to='transactions.transactionheader', verbose_name='Transaction Header')),
            ],
            options={
                'verbose_name': 'Ledger Entry',
                'verbose_name_plural': 'Ledger Entries',
                'indexes': [models.Index(fields=['branch', 'entry_date'], name='transaction_branch__ddcb97_idx'), models.Index(fields=['account', 'entry_date'], name='transaction_account_c40ee7_idx'), models.Index(fields=['transaction_header'], name='transaction_transac_b4c067_idx'), models.Index(fields=['is_posted'], name='transaction_is_post_881809_idx'), models.Index(fields=['is_reversed'], name='transaction_is_reve_0c5dd1_idx'), models.Index(fields=['cost_center'], name='transaction_cost_ce_f0de77_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('debit_amount__gte', 0)), name='non_negative_debit_amount'), models.CheckConstraint(condition=models.Q(('credit_amount__gte', 0)), name='non_negative_credit_amount'), models.CheckConstraint(condition=models.Q(('debit_amount__gt', 0), ('credit_amount__gt', 0), _negated=True), name='not_both_debit_and_credit'), models.CheckConstraint(condition=models.Q(('debit_amount__gt', 0), ('credit_amount__gt', 0), _connector='OR'), name='either_debit_or_credit')],
            },
        ),
        migrations.AddIndex(
            model_name='transactiontype',
            index=models.Index(fields=['branch'], name='transaction_branch__89f7b5_idx'),
        ),
        migrations.AddIndex(
            model_name='transactiontype',
            index=models.Index(fields=['category'], name='transaction_categor_aa77e6_idx'),
        ),
        migrations.AddIndex(
            model_name='transactiontype',
            index=models.Index(fields=['is_active'], name='transaction_is_acti_030b98_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='transactiontype',
            unique_together={('branch', 'type_code')},
        ),
        migrations.AddIndex(
            model_name='transactionheader',
            index=models.Index(fields=['branch'], name='transaction_branch__699935_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionheader',
            index=models.Index(fields=['transaction_type'], name='transaction_transac_75c4a6_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionheader',
            index=models.Index(fields=['transaction_number'], name='transaction_transac_2745f2_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionheader',
            index=models.Index(fields=['reference_number'], name='transaction_referen_05a8ab_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionheader',
            index=models.Index(fields=['transaction_date'], name='transaction_transac_7bb9a1_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionheader',
            index=models.Index(fields=['due_date'], name='transaction_due_dat_5ab05a_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionheader',
            index=models.Index(fields=['status'], name='transaction_status_ad4ce8_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionheader',
            index=models.Index(fields=['customer_account'], name='transaction_custome_f54eec_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionheader',
            index=models.Index(fields=['supplier_account'], name='transaction_supplie_cfc275_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionheader',
            index=models.Index(fields=['total_amount'], name='transaction_total_a_a7a0f7_idx'),
        ),
        migrations.AddIndex(
            model_name='transactionheader',
            index=models.Index(fields=['posted_at'], name='transaction_posted__7d7d09_idx'),
        ),
        migrations.AddConstraint(
            model_name='transactionheader',
            constraint=models.CheckConstraint(condition=models.Q(('exchange_rate__gt', 0)), name='transaction_positive_exchange_rate'),
        ),
        migrations.AddConstraint(
            model_name='transactionheader',
            constraint=models.CheckConstraint(condition=models.Q(('paid_amount__lte', models.F('total_amount'))), name='paid_not_exceeding_total'),
        ),
        migrations.AlterUniqueTogether(
            name='transactionheader',
            unique_together={('branch', 'transaction_number')},
        ),
    ]
