# Generated by Django 5.2.3 on 2025-06-25 08:42

import apps.core_apps.validators
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounting', '0002_initial'),
        ('organization', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StoreGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('store_group_code', models.CharField(help_text='Unique store group code', max_length=20, verbose_name='Store Group Code')),
                ('store_group_name', models.CharField(help_text='Store group display name', max_length=100, verbose_name='Store Group Name')),
                ('cost_method', models.CharField(choices=[('average', 'Average Cost'), ('fifo', 'First In, First Out'), ('lifo', 'Last In, First Out'), ('standard', 'Standard Cost')], default='average', help_text='Inventory costing method', max_length=10, verbose_name='Cost Method')),
            ],
            options={
                'verbose_name': 'Store Group',
                'verbose_name_plural': 'Store Groups',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('item_code', models.CharField(help_text='Unique item code/SKU', max_length=50, verbose_name='Item Code')),
                ('item_name', models.CharField(help_text='Item display name', max_length=200, verbose_name='Item Name')),
                ('item_name_english', models.CharField(blank=True, help_text='Item name in English', max_length=200, null=True, verbose_name='Item Name (English)')),
                ('item_type', models.CharField(choices=[('product', 'Product'), ('service', 'Service'), ('kit', 'Kit/Bundle')], default='product', help_text='Type of item', max_length=10, verbose_name='Item Type')),
                ('base_unit', models.CharField(help_text='Base unit of measure (e.g., piece, box, bottle)', max_length=20, verbose_name='Base Unit')),
                ('shelf_location', models.CharField(blank=True, help_text='Physical location in warehouse/store', max_length=50, null=True, verbose_name='Shelf Location')),
                ('attributes', models.CharField(blank=True, help_text='Physical attributes (size, color, etc.)', max_length=200, null=True, verbose_name='Attributes')),
                ('weight', models.DecimalField(blank=True, decimal_places=3, help_text='Item weight in kg', max_digits=10, null=True, validators=[apps.core_apps.validators.validate_positive_decimal], verbose_name='Weight')),
                ('volume', models.DecimalField(blank=True, decimal_places=3, help_text='Item volume in liters', max_digits=10, null=True, validators=[apps.core_apps.validators.validate_positive_decimal], verbose_name='Volume')),
                ('manufacturer', models.CharField(blank=True, help_text='Item manufacturer', max_length=100, null=True, verbose_name='Manufacturer')),
                ('brand', models.CharField(blank=True, help_text='Item brand name', max_length=100, null=True, verbose_name='Brand')),
                ('model_number', models.CharField(blank=True, help_text='Manufacturer model number', max_length=50, null=True, verbose_name='Model Number')),
                ('scientific_name', models.CharField(blank=True, help_text='Scientific/generic name of the drug', max_length=200, null=True, verbose_name='Scientific Name')),
                ('active_ingredient', models.CharField(blank=True, help_text='Active pharmaceutical ingredient', max_length=200, null=True, verbose_name='Active Ingredient')),
                ('strength', models.CharField(blank=True, help_text='Drug strength/concentration', max_length=50, null=True, verbose_name='Strength')),
                ('dosage_form', models.CharField(blank=True, help_text='Form of medication (tablet, capsule, syrup, etc.)', max_length=50, null=True, verbose_name='Dosage Form')),
                ('route_of_administration', models.CharField(blank=True, help_text='How the medication is administered', max_length=50, null=True, verbose_name='Route of Administration')),
                ('indications', models.TextField(blank=True, help_text='Medical conditions this drug treats', null=True, verbose_name='Indications')),
                ('contraindications', models.TextField(blank=True, help_text='Conditions where this drug should not be used', null=True, verbose_name='Contraindications')),
                ('side_effects', models.TextField(blank=True, help_text='Known side effects and adverse reactions', null=True, verbose_name='Side Effects')),
                ('precautions', models.TextField(blank=True, help_text='Precautions and warnings', null=True, verbose_name='Precautions')),
                ('drug_interactions', models.TextField(blank=True, help_text='Known drug interactions', null=True, verbose_name='Drug Interactions')),
                ('storage_conditions', models.TextField(blank=True, help_text='Required storage conditions', null=True, verbose_name='Storage Conditions')),
                ('standard_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Standard/average cost per base unit', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Standard Cost')),
                ('last_purchase_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Cost from last purchase', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Last Purchase Cost')),
                ('sales_price', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Standard sales price per base unit', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Sales Price')),
                ('wholesale_price', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Wholesale price per base unit', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Wholesale Price')),
                ('minimum_price', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Minimum allowed selling price', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Minimum Price')),
                ('maximum_price', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Maximum allowed selling price', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Maximum Price')),
                ('reorder_level', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Minimum stock level before reordering', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Reorder Level')),
                ('maximum_stock', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Maximum stock level to maintain', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Maximum Stock')),
                ('minimum_order_quantity', models.DecimalField(decimal_places=4, default=Decimal('1.0000'), help_text='Minimum quantity that can be ordered', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.0001'))], verbose_name='Minimum Order Quantity')),
                ('markup_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Standard markup percentage', max_digits=5, validators=[apps.core_apps.validators.validate_percentage], verbose_name='Markup Percentage')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Maximum discount percentage allowed', max_digits=5, validators=[apps.core_apps.validators.validate_percentage], verbose_name='Discount Percentage')),
                ('commission_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Sales commission percentage', max_digits=5, validators=[apps.core_apps.validators.validate_percentage], verbose_name='Commission Percentage')),
                ('vat_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='VAT tax percentage', max_digits=5, validators=[apps.core_apps.validators.validate_percentage], verbose_name='VAT Percentage')),
                ('handling_fee', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Additional handling fee per unit', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Handling Fee')),
                ('is_service_item', models.BooleanField(default=False, help_text='Whether this is a service item (no inventory tracking)', verbose_name='Service Item')),
                ('track_expiry', models.BooleanField(default=True, help_text='Track expiration dates for this item', verbose_name='Track Expiry')),
                ('track_batches', models.BooleanField(default=True, help_text='Track batch numbers for this item', verbose_name='Track Batches')),
                ('allow_discount', models.BooleanField(default=True, help_text='Allow discounts on this item', verbose_name='Allow Discount')),
                ('allow_bonus', models.BooleanField(default=True, help_text='Allow bonus quantities for this item', verbose_name='Allow Bonus')),
                ('is_prescription_required', models.BooleanField(default=False, help_text='Whether prescription is required to sell this item', verbose_name='Prescription Required')),
                ('is_controlled_substance', models.BooleanField(default=False, help_text='Whether this is a controlled substance', verbose_name='Controlled Substance')),
                ('expiry_warning_days', models.PositiveIntegerField(default=30, help_text='Days before expiry to show warning', verbose_name='Expiry Warning Days')),
                ('primary_image', models.ImageField(blank=True, help_text='Primary product image', null=True, upload_to='items/primary/', verbose_name='Primary Image')),
                ('description', models.TextField(blank=True, help_text='Detailed item description', verbose_name='Description')),
                ('internal_notes', models.TextField(blank=True, help_text='Internal notes (not visible to customers)', verbose_name='Internal Notes')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
            },
        ),
        migrations.CreateModel(
            name='InventoryBalance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('location', models.CharField(blank=True, help_text='Storage location within branch', max_length=50, null=True, verbose_name='Location')),
                ('batch_number', models.CharField(blank=True, help_text='Manufacturing batch number', max_length=50, null=True, verbose_name='Batch Number')),
                ('expiry_date', models.DateField(blank=True, help_text='Product expiration date', null=True, verbose_name='Expiry Date')),
                ('available_quantity', models.DecimalField(decimal_places=8, default=Decimal('0E-8'), help_text='Currently available quantity in base units', max_digits=18, verbose_name='Available Quantity')),
                ('reserved_quantity', models.DecimalField(decimal_places=8, default=Decimal('0E-8'), help_text='Quantity reserved for pending orders', max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Reserved Quantity')),
                ('average_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Average cost per base unit', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Average Cost')),
                ('last_movement_date', models.DateTimeField(auto_now=True, help_text='Date of last inventory movement', verbose_name='Last Movement Date')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_balances', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_balances', to='inventory.item', verbose_name='Item')),
            ],
            options={
                'verbose_name': 'Inventory Balance',
                'verbose_name_plural': 'Inventory Balances',
            },
        ),
        migrations.CreateModel(
            name='DrugInformation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('drug_class', models.CharField(blank=True, max_length=100)),
                ('therapeutic_category', models.CharField(blank=True, max_length=100)),
                ('pregnancy_category', models.CharField(blank=True, max_length=10)),
                ('controlled_substance_schedule', models.CharField(blank=True, max_length=10)),
                ('generic_available', models.BooleanField(default=False)),
                ('refrigeration_required', models.BooleanField(default=False)),
                ('narcotic', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='drug_info', to='inventory.item')),
            ],
            options={
                'verbose_name': 'Drug Information',
                'verbose_name_plural': 'Drug Information',
            },
        ),
        migrations.CreateModel(
            name='ItemGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('item_group_code', models.CharField(help_text='Unique item group code', max_length=20, verbose_name='Item Group Code')),
                ('item_group_name', models.CharField(help_text='Item group display name', max_length=100, verbose_name='Item Group Name')),
                ('group_type', models.CharField(choices=[('product', 'Product'), ('service', 'Service'), ('both', 'Product & Service')], default='product', help_text='Type of items in this group', max_length=10, verbose_name='Group Type')),
                ('image', models.ImageField(blank=True, help_text='Image representing this item group', null=True, upload_to='item_groups/', verbose_name='Group Image')),
                ('description', models.TextField(blank=True, help_text='Description of this item group', verbose_name='Description')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_groups', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('default_account', models.ForeignKey(blank=True, help_text='Default account for items in this group', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='item_groups', to='accounting.account', verbose_name='Default Account')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent item group in hierarchy', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='inventory.itemgroup', verbose_name='Parent Group')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Item Group',
                'verbose_name_plural': 'Item Groups',
            },
        ),
        migrations.AddField(
            model_name='item',
            name='item_group',
            field=models.ForeignKey(help_text='Item group this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.itemgroup', verbose_name='Item Group'),
        ),
        migrations.CreateModel(
            name='ItemUnit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('unit_code', models.CharField(help_text='Unit code (e.g., BOX, STRIP, PIECE)', max_length=20, verbose_name='Unit Code')),
                ('unit_name', models.CharField(help_text='Full unit name', max_length=50, verbose_name='Unit Name')),
                ('conversion_factor', models.DecimalField(decimal_places=8, default=Decimal('1.00000000'), help_text='Number of base units in this unit', max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('1E-8'))], verbose_name='Conversion Factor')),
                ('unit_price', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Sales price for this unit', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Unit Price')),
                ('unit_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Cost for this unit', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Unit Cost')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default selling unit', verbose_name='Default Unit')),
                ('is_purchase_unit', models.BooleanField(default=False, help_text='Whether this unit can be used for purchasing', verbose_name='Purchase Unit')),
                ('is_sales_unit', models.BooleanField(default=True, help_text='Whether this unit can be used for sales', verbose_name='Sales Unit')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='units', to='inventory.item', verbose_name='Item')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Item Unit',
                'verbose_name_plural': 'Item Units',
            },
        ),
        migrations.CreateModel(
            name='ItemBarcode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('barcode', models.CharField(help_text='Barcode value', max_length=50, verbose_name='Barcode')),
                ('barcode_type', models.CharField(choices=[('ean13', 'EAN-13'), ('ean8', 'EAN-8'), ('upc', 'UPC'), ('code128', 'Code 128'), ('code39', 'Code 39'), ('qr', 'QR Code'), ('other', 'Other')], default='ean13', help_text='Type of barcode', max_length=20, verbose_name='Barcode Type')),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary barcode for the item', verbose_name='Primary Barcode')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barcodes', to='inventory.item', verbose_name='Item')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('unit', models.ForeignKey(blank=True, help_text='Unit this barcode represents (if specific)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='barcodes', to='inventory.itemunit', verbose_name='Unit')),
            ],
            options={
                'verbose_name': 'Item Barcode',
                'verbose_name_plural': 'Item Barcodes',
            },
        ),
        migrations.CreateModel(
            name='SampleDistribution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.item')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.itemunit')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
