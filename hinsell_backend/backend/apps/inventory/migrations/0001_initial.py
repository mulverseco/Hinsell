# Generated by Django 5.2.3 on 2025-08-01 09:07

import apps.core_apps.validators
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounting', '0001_initial'),
        ('organization', '0001_initial'),
        ('shared', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ItemGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default='IG-7E35DC46', max_length=20, verbose_name='Code')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('slug', models.SlugField(max_length=120, unique=True, verbose_name='Slug')),
                ('group_type', models.CharField(choices=[('product', 'Product'), ('service', 'Service'), ('both', 'Product & Service')], default='product', max_length=10, verbose_name='Group Type')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('meta_title', models.CharField(blank=True, max_length=60, verbose_name='Meta Title')),
                ('meta_description', models.CharField(blank=True, max_length=160, verbose_name='Meta Description')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Featured')),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('registered', 'Registered Users Only'), ('hidden', 'Hidden')], default='public', max_length=20, verbose_name='Visibility')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_groups', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('media', models.ManyToManyField(blank=True, related_name='item_groups', to='shared.media', verbose_name='Media')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='inventory.itemgroup', verbose_name='Parent Group')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Item Group',
                'verbose_name_plural': 'Item Groups',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default='ITM-6713FB2F', max_length=50, verbose_name='Code')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('slug', models.SlugField(max_length=220, unique=True, verbose_name='Slug')),
                ('item_type', models.CharField(choices=[('product', 'Product'), ('service', 'Service'), ('kit', 'Kit/Bundle')], default='product', max_length=10, verbose_name='Item Type')),
                ('base_unit', models.CharField(max_length=20, verbose_name='Base Unit')),
                ('shelf_location', models.CharField(blank=True, max_length=50, null=True, verbose_name='Shelf Location')),
                ('weight', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, validators=[apps.core_apps.validators.validate_positive_decimal], verbose_name='Weight')),
                ('volume', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, validators=[apps.core_apps.validators.validate_positive_decimal], verbose_name='Volume')),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True, verbose_name='Manufacturer')),
                ('brand', models.CharField(blank=True, max_length=100, null=True, verbose_name='Brand')),
                ('scientific_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Scientific Name')),
                ('active_ingredient', models.CharField(blank=True, max_length=200, null=True, verbose_name='Active Ingredient')),
                ('strength', models.CharField(blank=True, max_length=50, null=True, verbose_name='Strength')),
                ('dosage_form', models.CharField(blank=True, max_length=50, null=True, verbose_name='Dosage Form')),
                ('route_of_administration', models.CharField(blank=True, max_length=50, null=True, verbose_name='Route of Administration')),
                ('indications', models.TextField(blank=True, null=True, verbose_name='Indications')),
                ('contraindications', models.TextField(blank=True, null=True, verbose_name='Contraindications')),
                ('side_effects', models.TextField(blank=True, null=True, verbose_name='Side Effects')),
                ('precautions', models.TextField(blank=True, null=True, verbose_name='Precautions')),
                ('drug_interactions', models.TextField(blank=True, null=True, verbose_name='Drug Interactions')),
                ('storage_conditions', models.TextField(blank=True, null=True, verbose_name='Storage Conditions')),
                ('standard_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Standard Cost')),
                ('sales_price', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Sales Price')),
                ('wholesale_price', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Wholesale Price')),
                ('minimum_price', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Minimum Price')),
                ('maximum_price', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Maximum Price')),
                ('meta_title', models.CharField(blank=True, max_length=60, verbose_name='Meta Title')),
                ('meta_description', models.CharField(blank=True, max_length=160, verbose_name='Meta Description')),
                ('tags', models.CharField(blank=True, max_length=255, verbose_name='Tags')),
                ('average_rating', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=3, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('5'))], verbose_name='Average Rating')),
                ('review_count', models.PositiveIntegerField(default=0, verbose_name='Review Count')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Featured')),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('registered', 'Registered Users Only'), ('prescription', 'Prescription Required'), ('hidden', 'Hidden')], default='public', max_length=20, verbose_name='Visibility')),
                ('reorder_level', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Reorder Level')),
                ('maximum_stock', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Maximum Stock')),
                ('minimum_order_quantity', models.DecimalField(decimal_places=4, default=Decimal('1.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.0001'))], verbose_name='Minimum Order Quantity')),
                ('markup_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[apps.core_apps.validators.validate_percentage], verbose_name='Markup Percentage')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[apps.core_apps.validators.validate_percentage], verbose_name='Discount Percentage')),
                ('commission_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[apps.core_apps.validators.validate_percentage], verbose_name='Commission Percentage')),
                ('vat_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[apps.core_apps.validators.validate_percentage], verbose_name='VAT Percentage')),
                ('handling_fee', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Handling Fee')),
                ('is_service_item', models.BooleanField(default=False, verbose_name='Service Item')),
                ('track_expiry', models.BooleanField(default=True, verbose_name='Track Expiry')),
                ('track_batches', models.BooleanField(default=True, verbose_name='Track Batches')),
                ('allow_discount', models.BooleanField(default=True, verbose_name='Allow Discount')),
                ('allow_bonus', models.BooleanField(default=True, verbose_name='Allow Bonus')),
                ('is_prescription_required', models.BooleanField(default=False, verbose_name='Prescription Required')),
                ('is_controlled_substance', models.BooleanField(default=False, verbose_name='Controlled Substance')),
                ('expiry_warning_days', models.PositiveIntegerField(default=30, verbose_name='Expiry Warning Days')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('short_description', models.CharField(blank=True, max_length=255, verbose_name='Short Description')),
                ('internal_notes', models.TextField(blank=True, verbose_name='Internal Notes')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('media', models.ManyToManyField(blank=True, related_name='items', to='shared.media', verbose_name='Media')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('item_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.itemgroup', verbose_name='Item Group')),
            ],
            options={
                'verbose_name': 'Item',
                'verbose_name_plural': 'Items',
            },
        ),
        migrations.CreateModel(
            name='ItemVariant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default='VAR-74050582', max_length=50, verbose_name='Code')),
                ('size', models.CharField(blank=True, max_length=50, verbose_name='Size')),
                ('color', models.CharField(blank=True, max_length=50, verbose_name='Color')),
                ('standard_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Standard Cost')),
                ('sales_price', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Sales Price')),
                ('reorder_level', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Reorder Level')),
                ('maximum_stock', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Maximum Stock')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='inventory.item', verbose_name='Item')),
                ('media', models.ManyToManyField(blank=True, related_name='item_variants', to='shared.media', verbose_name='Media')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Item Variant',
                'verbose_name_plural': 'Item Variants',
            },
        ),
        migrations.CreateModel(
            name='ItemUnit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default='UNT-41456779', max_length=20, verbose_name='Code')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('conversion_factor', models.DecimalField(decimal_places=8, default=Decimal('1.00000000'), max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('1E-8'))], verbose_name='Conversion Factor')),
                ('unit_price', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Unit Price')),
                ('unit_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Unit Cost')),
                ('is_default', models.BooleanField(default=False, verbose_name='Default Unit')),
                ('is_purchase_unit', models.BooleanField(default=False, verbose_name='Purchase Unit')),
                ('is_sales_unit', models.BooleanField(default=True, verbose_name='Sales Unit')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='units', to='inventory.itemvariant', verbose_name='Item Variant')),
            ],
            options={
                'verbose_name': 'Item Unit',
                'verbose_name_plural': 'Item Units',
            },
        ),
        migrations.CreateModel(
            name='ItemBarcode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('barcode', models.CharField(default='BAR-20C912AE', max_length=50, verbose_name='Barcode')),
                ('barcode_type', models.CharField(choices=[('ean13', 'EAN-13'), ('ean8', 'EAN-8'), ('upc', 'UPC'), ('code128', 'Code 128'), ('code39', 'Code 39'), ('qr', 'QR Code'), ('other', 'Other')], default='ean13', max_length=20, verbose_name='Barcode Type')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Primary Barcode')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='barcodes', to='inventory.itemunit', verbose_name='Unit')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barcodes', to='inventory.itemvariant', verbose_name='Item Variant')),
            ],
            options={
                'verbose_name': 'Item Barcode',
                'verbose_name_plural': 'Item Barcodes',
            },
        ),
        migrations.CreateModel(
            name='InventoryBalance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('location', models.CharField(blank=True, max_length=50, null=True, verbose_name='Location')),
                ('batch_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Batch Number')),
                ('expiry_date', models.DateField(blank=True, null=True, verbose_name='Expiry Date')),
                ('available_quantity', models.DecimalField(decimal_places=8, default=Decimal('0E-8'), max_digits=18, verbose_name='Available Quantity')),
                ('reserved_quantity', models.DecimalField(decimal_places=8, default=Decimal('0E-8'), max_digits=18, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Reserved Quantity')),
                ('average_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='Average Cost')),
                ('last_movement_date', models.DateTimeField(auto_now=True, verbose_name='Last Movement Date')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_balances', to='organization.branch', verbose_name='Branch')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_balances', to='inventory.itemvariant', verbose_name='Item Variant')),
            ],
            options={
                'verbose_name': 'Inventory Balance',
                'verbose_name_plural': 'Inventory Balances',
            },
        ),
        migrations.CreateModel(
            name='StoreGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this record', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when this record was last updated')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this record is active')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Whether this record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when this record was soft deleted', null=True)),
                ('code', models.CharField(default='SG-B0B4F67D', max_length=20, unique=True, verbose_name='Code')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('slug', models.SlugField(max_length=120, unique=True, verbose_name='Slug')),
                ('cost_method', models.CharField(choices=[('average', 'Average Cost'), ('fifo', 'First In, First Out'), ('lifo', 'Last In, First Out'), ('standard', 'Standard Cost')], default='average', max_length=10, verbose_name='Cost Method')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_groups', to='organization.branch', verbose_name='Branch')),
                ('cost_of_sales_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cost_store_groups', to='accounting.account', verbose_name='Cost of Sales Account')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('sales_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sales_store_groups', to='accounting.account', verbose_name='Sales Account')),
                ('stock_account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_store_groups', to='accounting.account', verbose_name='Stock Account')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Store Group',
                'verbose_name_plural': 'Store Groups',
            },
        ),
        migrations.AddField(
            model_name='itemgroup',
            name='store_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_groups', to='inventory.storegroup', verbose_name='Store Group'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['branch', 'code'], name='inventory_i_branch__6c45c9_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['item_group', 'slug'], name='inventory_i_item_gr_1391f9_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['is_featured', 'visibility', 'average_rating'], name='inventory_i_is_feat_8857fd_idx'),
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['manufacturer', 'brand', 'scientific_name'], name='inventory_i_manufac_1806e8_idx'),
        ),
        migrations.AddConstraint(
            model_name='item',
            constraint=models.CheckConstraint(condition=models.Q(('markup_percentage__gte', 0), ('markup_percentage__lte', 1000)), name='item_valid_markup_percentage'),
        ),
        migrations.AddConstraint(
            model_name='item',
            constraint=models.CheckConstraint(condition=models.Q(('discount_percentage__gte', 0), ('discount_percentage__lte', 100)), name='item_valid_discount_percentage'),
        ),
        migrations.AddConstraint(
            model_name='item',
            constraint=models.CheckConstraint(condition=models.Q(('commission_percentage__gte', 0), ('commission_percentage__lte', 100)), name='item_valid_commission_percentage'),
        ),
        migrations.AddConstraint(
            model_name='item',
            constraint=models.CheckConstraint(condition=models.Q(('vat_percentage__gte', 0), ('vat_percentage__lte', 100)), name='item_valid_vat_percentage'),
        ),
        migrations.AddConstraint(
            model_name='item',
            constraint=models.CheckConstraint(condition=models.Q(('minimum_order_quantity__gt', 0)), name='item_positive_minimum_order_quantity'),
        ),
        migrations.AddConstraint(
            model_name='item',
            constraint=models.CheckConstraint(condition=models.Q(('average_rating__gte', 0), ('average_rating__lte', 5)), name='valid_average_rating'),
        ),
        migrations.AddIndex(
            model_name='itemvariant',
            index=models.Index(fields=['item', 'code'], name='inventory_i_item_id_d883e1_idx'),
        ),
        migrations.AddIndex(
            model_name='itemvariant',
            index=models.Index(fields=['size', 'color'], name='inventory_i_size_915a2f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='itemvariant',
            unique_together={('item', 'code'), ('item', 'size', 'color')},
        ),
        migrations.AddIndex(
            model_name='itemunit',
            index=models.Index(fields=['item', 'code'], name='inventory_i_item_id_a32a45_idx'),
        ),
        migrations.AddIndex(
            model_name='itemunit',
            index=models.Index(fields=['is_default'], name='inventory_i_is_defa_5594ab_idx'),
        ),
        migrations.AddConstraint(
            model_name='itemunit',
            constraint=models.CheckConstraint(condition=models.Q(('conversion_factor__gt', 0)), name='positive_conversion_factor'),
        ),
        migrations.AlterUniqueTogether(
            name='itemunit',
            unique_together={('item', 'code')},
        ),
        migrations.AddIndex(
            model_name='itembarcode',
            index=models.Index(fields=['item', 'barcode'], name='inventory_i_item_id_9cf933_idx'),
        ),
        migrations.AddIndex(
            model_name='itembarcode',
            index=models.Index(fields=['is_primary'], name='inventory_i_is_prim_433848_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='itembarcode',
            unique_together={('item', 'barcode')},
        ),
        migrations.AddIndex(
            model_name='inventorybalance',
            index=models.Index(fields=['branch', 'item'], name='inventory_i_branch__94f116_idx'),
        ),
        migrations.AddIndex(
            model_name='inventorybalance',
            index=models.Index(fields=['expiry_date', 'batch_number'], name='inventory_i_expiry__fe73c3_idx'),
        ),
        migrations.AddIndex(
            model_name='inventorybalance',
            index=models.Index(fields=['available_quantity', 'last_movement_date'], name='inventory_i_availab_440fcd_idx'),
        ),
        migrations.AddConstraint(
            model_name='inventorybalance',
            constraint=models.CheckConstraint(condition=models.Q(('reserved_quantity__gte', 0)), name='non_negative_reserved_quantity'),
        ),
        migrations.AlterUniqueTogether(
            name='inventorybalance',
            unique_together={('branch', 'item', 'location', 'batch_number', 'expiry_date')},
        ),
        migrations.AddIndex(
            model_name='storegroup',
            index=models.Index(fields=['branch', 'code'], name='inventory_s_branch__453e55_idx'),
        ),
        migrations.AddIndex(
            model_name='storegroup',
            index=models.Index(fields=['slug'], name='inventory_s_slug_4bbd0b_idx'),
        ),
        migrations.AddIndex(
            model_name='itemgroup',
            index=models.Index(fields=['branch', 'store_group', 'code'], name='inventory_i_branch__ba952a_idx'),
        ),
        migrations.AddIndex(
            model_name='itemgroup',
            index=models.Index(fields=['slug', 'is_featured', 'visibility'], name='inventory_i_slug_1bac88_idx'),
        ),
    ]
